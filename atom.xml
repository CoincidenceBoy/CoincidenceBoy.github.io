<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoincidenceBoy</title>
  
  <subtitle>blog</subtitle>
  <link href="https://coincidenceboy.github.io/atom.xml" rel="self"/>
  
  <link href="https://coincidenceboy.github.io/"/>
  <updated>2021-01-28T10:18:21.319Z</updated>
  <id>https://coincidenceboy.github.io/</id>
  
  <author>
    <name>CoincidenceBoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css基础</title>
    <link href="https://coincidenceboy.github.io/2021/01/28/css%E5%9F%BA%E7%A1%80/"/>
    <id>https://coincidenceboy.github.io/2021/01/28/css%E5%9F%BA%E7%A1%80/</id>
    <published>2021-01-28T10:18:21.000Z</published>
    <updated>2021-01-28T10:18:21.319Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>html表格和表单</title>
    <link href="https://coincidenceboy.github.io/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/"/>
    <id>https://coincidenceboy.github.io/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/</id>
    <published>2021-01-28T09:10:46.000Z</published>
    <updated>2021-01-28T10:16:55.255Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="lt-table-gt-lt-table-gt"><a href="#lt-table-gt-lt-table-gt" class="headerlink" title="&lt; table &gt;&lt; /table &gt;"></a>&lt; table &gt;&lt; /table &gt;</h1><h2 id="table属性"><a href="#table属性" class="headerlink" title="table属性"></a>table属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">border:表格边框</span><br><span class="line">width :表格宽度</span><br><span class="line">align :表格对齐方式</span><br><span class="line">cellspacing(表格间距):单元格间隔</span><br><span class="line">cellpadding(表格填充):单元格边沿与内容之间的空白</span><br></pre></td></tr></table></figure><p><img src="/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/2.png" alt="image-20210128173536185"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;4px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>住址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表体--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表脚--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>注:yds为优秀三好学生<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="lt-form-gt-lt-form-gt"><a href="#lt-form-gt-lt-form-gt" class="headerlink" title="&lt; form &gt;&lt; /form &gt;"></a>&lt; form &gt;&lt; /form &gt;</h1><blockquote><p>实现前后端交互的一个重要便签 ! </p></blockquote><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name:表单名称</span><br><span class="line">action:表单数据提交的地方(#表示提交到当前文件)</span><br><span class="line">method:前端提交数据到后端的方法,主要有get(默认)和post(提交数据不会暴露在地址栏中)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表单元素有input,textarea,button,select--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单组件-表单元素"><a href="#表单组件-表单元素" class="headerlink" title="表单组件(表单元素)"></a>表单组件(表单元素)</h2><blockquote><p>input类,textarea类,select类,button类</p></blockquote><h3 id="input组件"><a href="#input组件" class="headerlink" title="input组件"></a>input组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">name主要是为了传送到后台后,进行区别</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本输入框:text--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入一个数字&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">    placeholder当未输入的时候的提示字符,如果给一个value初值则placeholder无效</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--密码输入:password--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入密码&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;16&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单选钮:radio--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复选框:checkbox--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>写代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>看电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>csgo</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>听音乐</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文件上传:file  上传文件到后台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--普通按钮:button 通常用其去调用脚本代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--图片按钮:image 与submit类似 只不是提示信息是图片 不是文字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;btn.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;刷新&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提交按钮:submit 将表单数据提交到后台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--重置按钮:reset--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/3.png" alt="image-20210128175619611"></p><h3 id="textarea组件"><a href="#textarea组件" class="headerlink" title="textarea组件"></a>textarea组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;写下您的评论&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/4.png" alt="image-20210128180235918"></p><h3 id="select组件"><a href="#select组件" class="headerlink" title="select组件"></a>select组件</h3><blockquote><p>通常配合&lt; label &gt;&lt; /label &gt;使用</p><p>定义 <strong>单选|多选下拉菜单</strong>,包含若干个可选项(&lt; option &gt;&lt; /option &gt;)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;course&quot;</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">multiple</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chinese&quot;</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;math&quot;</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;computer&quot;</span>&gt;</span>计算机<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;else&quot;</span>&gt;</span>其他<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/28/html%E8%A1%A8%E6%A0%BC%E5%92%8C%E8%A1%A8%E5%8D%95/5.png" alt="image-20210128180458779"></p><h3 id="button组件"><a href="#button组件" class="headerlink" title="button组件"></a>button组件</h3><blockquote><p>普通按钮 .  </p><ul><li>可以不写在form里面单独使用.</li><li>如果写在form里面,则用做提交功能. </li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;1.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!--这里的button组件功能 与 input组件type=&quot;submit&quot;功能相同--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;lt-table-gt-lt-table-gt</summary>
      
    
    
    
    <category term="前端" scheme="https://coincidenceboy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="html" scheme="https://coincidenceboy.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html标签属性</title>
    <link href="https://coincidenceboy.github.io/2021/01/28/html%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/"/>
    <id>https://coincidenceboy.github.io/2021/01/28/html%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7/</id>
    <published>2021-01-28T09:09:49.000Z</published>
    <updated>2021-01-28T09:23:01.704Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="html属性"><a href="#html属性" class="headerlink" title="html属性"></a>html属性</h1><h2 id="通用属性"><a href="#通用属性" class="headerlink" title="通用属性"></a>通用属性</h2><blockquote><ol><li>id : 元素唯一的id</li><li>class : 元素的类名 可以有多个 例如 &lt; p class=”class1 class2”&gt;段落&lt; /p &gt;</li><li>style : 规定元素的行内样式</li><li>title : 鼠标停留在元素上时的提示文本 . </li></ol></blockquote><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><blockquote><p>常用于 <strong>图片懒加载</strong></p><p>html5 规定 自定义属性的格式为 data-* ,例如data-src</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以下代码是实际开发的案例，img标签显示的是缩略图，而data-src的值为点击显示原图的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;./img/1.jpg&#x27;</span> <span class="attr">data-src</span>=<span class="string">&#x27;./img/big_1.jpg&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="各便签的自有属性"><a href="#各便签的自有属性" class="headerlink" title="各便签的自有属性"></a>各便签的自有属性</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;html属性&quot;&gt;&lt;a href=&quot;#html属</summary>
      
    
    
    
    <category term="前端" scheme="https://coincidenceboy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="html" scheme="https://coincidenceboy.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html基本标签</title>
    <link href="https://coincidenceboy.github.io/2021/01/28/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>https://coincidenceboy.github.io/2021/01/28/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</id>
    <published>2021-01-28T06:30:33.000Z</published>
    <updated>2021-01-28T09:09:16.785Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="前端引入"><a href="#前端引入" class="headerlink" title="前端引入"></a>前端引入</h1><blockquote><p>​                <strong><em>前端开发又称 web前端开发,指的是基于web的网页界面美化及功能开发.</em></strong></p><p><strong>前端开发需要的技术</strong></p><ul><li>html5</li><li>css3</li><li>JavaScript</li><li>Bootstrap</li><li>jQuery</li><li>Ajax</li></ul></blockquote><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><blockquote><p><strong>HTML(<u>HyperText Mark-up Language</u>)即: 超文本标记语言 .</strong></p></blockquote><h2 id="关于浏览器"><a href="#关于浏览器" class="headerlink" title="关于浏览器"></a>关于浏览器</h2><blockquote><p><u><strong>五大主流浏览器</strong></u></p><p>IE(Internet Explorer) , 火狐(FireFox) , Chrome(谷歌) , Opera(欧朋) , Safari(苹果).</p><p><u><strong>浏览器内核</strong></u></p><ol><li>Trident内核 : 又称IE内核,是微软开发的一种排版引擎 . (使用Trident渲染引擎的浏览器主要有IE,遨游,qq浏览器)</li><li>Gecko内核 : 代表产品Mozila FirefoxGecko是一套c++编写的开源排版引擎. (使用Gecko内核的浏览器主要有Firefox,Netscape 6~9)</li><li>WebKit内核 : 主要用于Mac OS系统代表产品有Safari . (使用WebKit的浏览器主要有Safari和Chrome)</li><li>Presto内核 : 代表产品OperaPresto是由Opera Software开发的浏览器排版引擎,它是世界上公认最快的渲染速度的引擎. 在13年后,Opera宣布加入谷歌阵营,之后弃用.</li><li>Blink内核 : 由Google和Opera Software开发的浏览器排版引擎,13年4月发布 . 现在Chrome和Opera内核都是Blink.</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span><span class="comment">&lt;!--zh-CN表中文--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="comment">&lt;!--网页编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webstorm&quot;</span>&gt;</span><span class="comment">&lt;!--开发工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Jay_Yue&quot;</span>&gt;</span><span class="comment">&lt;!--作者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5,CSS3,jQuery&quot;</span>&gt;</span><span class="comment">&lt;!--关键字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;是但求其爱&quot;</span>&gt;</span><span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML标签及规范<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span><span class="comment">&lt;!--小图标link:favicon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="comment">&lt;!--引入外部样式--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*放css3代码*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主体部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*放js脚本*/</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>称为根元素,包裹所有网页元素;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>文档头部, 头部元素包含<span class="tag">&lt;<span class="name">meta</span>&gt;</span> , <span class="tag">&lt;<span class="name">title</span>&gt;</span> , <span class="tag">&lt;<span class="name">link</span>&gt;</span> , <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    1.<span class="tag">&lt;<span class="name">meta</span>&gt;</span>标签提供关于html文档的元数据.元数据不会显示在页面上,但是对于机器是可读的.</span><br><span class="line">    元数据可用于浏览器(如何显示内容或者重新加载页面),搜索引擎(关键词),或其他web服务.</span><br><span class="line">    2.<span class="tag">&lt;<span class="name">title</span>&gt;</span>定义网页的标题</span><br><span class="line">    3.<span class="tag">&lt;<span class="name">link</span>&gt;</span>引入外部样式</span><br><span class="line">    4.<span class="tag">&lt;<span class="name">style</span>&gt;</span>为html定义样式信息</span><br><span class="line"><span class="xml">    5.<span class="tag">&lt;<span class="name">script</span>&gt;</span>定义页面的脚本内容.</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span> 网页显示的主要内容  </span></span><br></pre></td></tr></table></figure></blockquote><h1 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h1><h2 id="常见双标签"><a href="#常见双标签" class="headerlink" title="常见双标签"></a>常见双标签</h2><h3 id="lt-h1-h6-gt-lt-h1-h6-gt"><a href="#lt-h1-h6-gt-lt-h1-h6-gt" class="headerlink" title="&lt; h1-h6 &gt;&lt; /h1-h6 &gt;"></a>&lt; h1-h6 &gt;&lt; /h1-h6 &gt;</h3><blockquote><p><strong>标题,会自动加粗</strong></p></blockquote><h3 id="lt-div-gt-lt-div-gt"><a href="#lt-div-gt-lt-div-gt" class="headerlink" title="&lt; div &gt;&lt; /div &gt;"></a>&lt; div &gt;&lt; /div &gt;</h3><blockquote><ul><li><strong>主要用于文档布局 , 取代了使用表格布局的老式方法.</strong></li><li><strong>用于组合其他html元素的容器.</strong></li></ul></blockquote><h3 id="lt-p-gt-lt-p-gt"><a href="#lt-p-gt-lt-p-gt" class="headerlink" title="&lt; p &gt;&lt; /p &gt;"></a>&lt; p &gt;&lt; /p &gt;</h3><blockquote><p><strong>定义段落.</strong></p></blockquote><h3 id="lt-a-gt-lt-a-gt"><a href="#lt-a-gt-lt-a-gt" class="headerlink" title="&lt; a &gt;&lt; /a &gt;"></a>&lt; a &gt;&lt; /a &gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接的目标url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;文档重定向&quot;</span>&gt;</span>文字或者图片(img)跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">target=&quot;_blank&quot;   新打开窗口载入</span><br><span class="line">      =&quot;_self&quot;    默认</span><br><span class="line">      =&quot;_parent&quot;    </span><br><span class="line">      =&quot;_top&quot;    </span><br></pre></td></tr></table></figure><h3 id="lt-span-gt-lt-span-gt"><a href="#lt-span-gt-lt-span-gt" class="headerlink" title="&lt; span &gt;&lt; /span &gt;"></a>&lt; span &gt;&lt; /span &gt;</h3><blockquote><p><strong>用来组合文档中的 行内元素 , 可用作文本的容器.</strong></p><p><strong>&lt; span &gt;没有 固定的格式表现,当对其应用样式时,才会产生视觉上的变化.</strong></p></blockquote><h3 id="lt-address-gt-lt-address-gt"><a href="#lt-address-gt-lt-address-gt" class="headerlink" title="&lt; address &gt;&lt; /address &gt;"></a>&lt; address &gt;&lt; /address &gt;</h3><blockquote><p><strong>地址信息</strong></p></blockquote><h3 id="lt-q-gt-lt-q-gt"><a href="#lt-q-gt-lt-q-gt" class="headerlink" title="&lt; q &gt;&lt; /q &gt;"></a>&lt; q &gt;&lt; /q &gt;</h3><blockquote><p><strong>短文本引用 (文本不用加引号,浏览器渲染时会自动加上引号)</strong></p></blockquote><h3 id="lt-caption-gt-lt-caption-gt"><a href="#lt-caption-gt-lt-caption-gt" class="headerlink" title="&lt; caption &gt;&lt; /caption &gt;"></a>&lt; caption &gt;&lt; /caption &gt;</h3><blockquote><p><strong>为表格(table)添加标题和摘要</strong></p></blockquote><h3 id="lt-ul-gt-lt-ul-gt"><a href="#lt-ul-gt-lt-ul-gt" class="headerlink" title="&lt; ul &gt;&lt; /ul &gt;"></a>&lt; ul &gt;&lt; /ul &gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//无序列表 unordered list</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-ol-gt-lt-ol-gt"><a href="#lt-ol-gt-lt-ol-gt" class="headerlink" title="&lt; ol &gt;&lt; /ol &gt;"></a>&lt; ol &gt;&lt; /ol &gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//有序列表 ordered list</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常见单标签"><a href="#常见单标签" class="headerlink" title="常见单标签"></a>常见单标签</h2><h3 id="lt-br-gt"><a href="#lt-br-gt" class="headerlink" title="&lt; br &gt;"></a>&lt; br &gt;</h3><blockquote><p><strong>换行</strong></p></blockquote><h3 id="lt-hr-gt"><a href="#lt-hr-gt" class="headerlink" title="&lt; hr &gt;"></a>&lt; hr &gt;</h3><blockquote><p><strong>分割线</strong></p></blockquote><h3 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="&lt; img &gt;"></a>&lt; img &gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像的url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;代替文本(图像加载不出来时)&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标移动到图片时的提示文字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><h3 id="lt-b-gt-lt-b-gt"><a href="#lt-b-gt-lt-b-gt" class="headerlink" title="&lt; b &gt;&lt; /b &gt;"></a>&lt; b &gt;&lt; /b &gt;</h3><blockquote><p><strong>加粗</strong></p></blockquote><h3 id="lt-strong-gt-lt-strong-gt"><a href="#lt-strong-gt-lt-strong-gt" class="headerlink" title="&lt; strong &gt;&lt; /strong &gt;"></a>&lt; strong &gt;&lt; /strong &gt;</h3><blockquote><p><strong>加粗且强调</strong></p></blockquote><h3 id="lt-i-gt-lt-i-gt"><a href="#lt-i-gt-lt-i-gt" class="headerlink" title="&lt; i &gt;&lt; /i &gt;"></a>&lt; i &gt;&lt; /i &gt;</h3><blockquote><p><strong>倾斜</strong></p></blockquote><h3 id="lt-em-gt-lt-em-gt"><a href="#lt-em-gt-lt-em-gt" class="headerlink" title="&lt; em &gt;&lt; /em &gt;"></a>&lt; em &gt;&lt; /em &gt;</h3><blockquote><p><strong>倾斜且强调</strong></p></blockquote><h3 id="lt-pre-gt-lt-pre-gt"><a href="#lt-pre-gt-lt-pre-gt" class="headerlink" title="&lt; pre &gt;&lt; /pre &gt;"></a>&lt; pre &gt;&lt; /pre &gt;</h3><blockquote><p><strong>预格式化文本 , 即:包裹在pre标签里面的文本 会保留空格和换行符,文本也会呈现等宽字体.</strong></p></blockquote><h3 id="lt-small-gt-lt-small-gt"><a href="#lt-small-gt-lt-small-gt" class="headerlink" title="&lt; small &gt;&lt; /small &gt;"></a>&lt; small &gt;&lt; /small &gt;</h3><blockquote><p><strong>小号字体</strong></p></blockquote><h3 id="lt-sub-gt-lt-sub-gt"><a href="#lt-sub-gt-lt-sub-gt" class="headerlink" title="&lt; sub &gt;&lt; /sub &gt;"></a>&lt; sub &gt;&lt; /sub &gt;</h3><blockquote><p><strong>下标</strong></p></blockquote><h3 id="lt-sup-gt-lt-sup-gt"><a href="#lt-sup-gt-lt-sup-gt" class="headerlink" title="&lt; sup &gt;&lt; /sup &gt;"></a>&lt; sup &gt;&lt; /sup &gt;</h3><blockquote><p><strong>上标</strong></p></blockquote><h2 id="实体转义符"><a href="#实体转义符" class="headerlink" title="实体转义符"></a>实体转义符</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>     <span class="comment">&lt;!--  &lt;  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span>  <span class="comment">&lt;!--  &gt;  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;amp;</span> <span class="comment">&lt;!--  &amp;  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;nbsp;</span>   <span class="comment">&lt;!--  空格  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;copy;</span>   <span class="comment">&lt;!--  版权号©  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;times;</span>  <span class="comment">&lt;!--  乘法×  --&gt;</span></span><br><span class="line"><span class="symbol">&amp;divide;</span> <span class="comment">&lt;!--  除法÷  --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="html块级元素和行级元素"><a href="#html块级元素和行级元素" class="headerlink" title="html块级元素和行级元素"></a>html块级元素和行级元素</h2><blockquote><p>根据css规范,每一个网页元素都有一个display属性,用于确定该元素的类型.</p><p>每个元素都有一个默认的display属性值,如div : display=”block” , 即块级元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而span : display=”inline” , 即行级元素.</p><ol><li><p>块级(block)元素:独占一行,可以设置 width,height等属性(宽度没有设置时,默认为100%) 用来搭建网络构架,布局,承载内容等</p></li><li><p>行级(inline)元素(内联元素):不独占一行,相邻的行内元素会排列在同一行里,直到一行排不下才会换行,</p><p>设置width,height等无效. 一般用在网站内容的某处细节,用来”强调,区分样式,上标,下标等”</p><blockquote><ul><li>块元素可以包含 内联元素&amp;某些块元素, 但内联元素只能包含内联元素;</li><li> (部分特殊的块级元素只能包含内联元素,如h1-h6)</li><li> 块级元素与块级元素并列、内嵌元素与内嵌元素并列。</li></ul></blockquote></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;前端引入&quot;&gt;&lt;a href=&quot;#前端引入&quot; c</summary>
      
    
    
    
    <category term="前端" scheme="https://coincidenceboy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="html" scheme="https://coincidenceboy.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>动态规划2-背包问题</title>
    <link href="https://coincidenceboy.github.io/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%922-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://coincidenceboy.github.io/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%922-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2021-01-24T12:42:15.000Z</published>
    <updated>2021-01-27T09:04:15.830Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="动态规划" scheme="https://coincidenceboy.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划1-引入</title>
    <link href="https://coincidenceboy.github.io/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/"/>
    <id>https://coincidenceboy.github.io/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/</id>
    <published>2021-01-24T12:41:25.000Z</published>
    <updated>2021-01-27T09:02:09.927Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="例1-爬楼梯"><a href="#例1-爬楼梯" class="headerlink" title="例1-爬楼梯"></a>例1-爬楼梯</h1><p><img src="/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/2.png" alt="image-20210124204929875"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="keyword">int</span> f[N];<span class="comment">//表示走到n阶时的方案数.</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>,f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">ans=f[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">//记忆化递归(带备忘的自顶向下法)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[n]) <span class="keyword">return</span> f[n];</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> f[n]=solve(n<span class="number">-1</span>)+solve(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例2-爬楼梯-进阶"><a href="#例2-爬楼梯-进阶" class="headerlink" title="例2-爬楼梯(进阶)"></a>例2-爬楼梯(进阶)</h1><p><img src="/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/3.png" alt="image-20210124205758352"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],n,k,m;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//记录不能落脚的阶梯</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;<span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">        vis[tmp]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=max(<span class="number">0</span>,i-k);j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">            f[i]+=f[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于该题的一些思考"><a href="#关于该题的一些思考" class="headerlink" title="关于该题的一些思考"></a>关于该题的一些思考</h2><p><img src="/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/4.png" alt="image-20210124212610017"></p><h1 id="例3-覆盖墙壁"><a href="#例3-覆盖墙壁" class="headerlink" title="例3-覆盖墙壁"></a>例3-覆盖墙壁</h1><p><img src="/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/5.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找规律</span></span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">f[<span class="number">3</span>]=<span class="number">5</span>;</span><br><span class="line">f[<span class="number">4</span>]=<span class="number">11</span>;</span><br><span class="line">f[<span class="number">5</span>]=<span class="number">24</span>;</span><br><span class="line">不妨猜想:f[i]=<span class="number">2</span>*f[i<span class="number">-1</span>]+f[i<span class="number">-3</span>];</span><br><span class="line">实际验证f[<span class="number">13</span>]=<span class="number">13465</span> 基本确定这个等式是成立的</span><br><span class="line">  问题是 该等式怎么求?</span><br></pre></td></tr></table></figure><p><img src="/2021/01/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%921-%E5%BC%95%E5%85%A5/6.png" alt="image-20210124215617285"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;例1-爬楼梯&quot;&gt;&lt;a href=&quot;#例1-爬楼</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="动态规划" scheme="https://coincidenceboy.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>dfs总结</title>
    <link href="https://coincidenceboy.github.io/2021/01/19/dfs%E6%80%BB%E7%BB%93/"/>
    <id>https://coincidenceboy.github.io/2021/01/19/dfs%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-19T12:42:39.000Z</published>
    <updated>2021-01-28T01:17:08.356Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h1><h2 id="从n个数中选k个-∑-sum-回溯"><a href="#从n个数中选k个-∑-sum-回溯" class="headerlink" title="从n个数中选k个 ∑=sum (回溯)"></a>从n个数中选k个 ∑=sum (回溯)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归(回溯)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,sum,a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">int</span> s,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cnt,<span class="keyword">int</span> i)</span><span class="comment">//cnt选几个 进行到i数组第几位</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;sum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt==k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s==sum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;v[j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(a[i]); s += a[i];</span><br><span class="line">        dfs(cnt+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">        v.pop_back();      s -= a[i];<span class="comment">//回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;ans:&quot;</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从n个数中选任意个-∑-sum-递归-01背包"><a href="#从n个数中选任意个-∑-sum-递归-01背包" class="headerlink" title="从n个数中选任意个 ∑=sum (递归 / 01背包)"></a>从n个数中选任意个 ∑=sum (递归 / 01背包)</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归(无回溯)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, sum, a[N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; sum) <span class="keyword">return</span>;<span class="comment">//if a[i]&gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == sum)</span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(i + <span class="number">1</span>, s + a[i]);</span><br><span class="line">    dfs(i + <span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; sum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//01背包</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span>+<span class="number">5</span>,SUM=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum,a[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][SUM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//dp[i][j] 表示仅考虑前i个数,∑为j的方案数</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=sum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]+=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j-a[i]&gt;=<span class="number">0</span>)</span><br><span class="line">            dp[i][j]+=dp[i<span class="number">-1</span>][j-a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][sum]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    滚动数组</span></span><br><span class="line"><span class="comment">    dp[0]=1;</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">    for(int j=m;j&gt;=a[i];j--)//逆序 防止覆盖</span></span><br><span class="line"><span class="comment">    dp[j]+=dp[j-a[i]];  //无须dp[i][j]+=dp[i-1][j]; 因为每一重i相当于上一重的继承</span></span><br><span class="line"><span class="comment">cout&lt;&lt;dp[sum]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全排列-permutation"><a href="#全排列-permutation" class="headerlink" title="全排列~permutation"></a>全排列~permutation</h2><p><img src="/2021/01/19/dfs%E6%80%BB%E7%BB%93/2.png" alt="image-20210128082344366"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归(回溯)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=m;i++)</span><br><span class="line">    &#123;<span class="comment">//每次循环都是 从第k个开始与后面包括自己的每个位swap</span></span><br><span class="line">        swap(a[i],a[k]);</span><br><span class="line">        permutation(k+<span class="number">1</span>,m);</span><br><span class="line">        swap(a[i],a[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">    permutation(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h2><p><img src="/2021/01/19/dfs%E6%80%BB%E7%BB%93/3.png" alt="image-20210128091417964"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//i表示操作队列还有几个数,j表示栈中有多少数</span></span><br><span class="line">    <span class="keyword">if</span> (f[i][j]) <span class="keyword">return</span> f[i][j];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) f[i][j] += dfs(i, j - <span class="number">1</span>);</span><br><span class="line">    f[i][j] += dfs(i - <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> f[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs(n, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;经典问题&quot;&gt;&lt;a href=&quot;#经典问题&quot; c</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="DFS" scheme="https://coincidenceboy.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>全排列next_permutation</title>
    <link href="https://coincidenceboy.github.io/2021/01/19/%E5%85%A8%E6%8E%92%E5%88%97next-permutation/"/>
    <id>https://coincidenceboy.github.io/2021/01/19/%E5%85%A8%E6%8E%92%E5%88%97next-permutation/</id>
    <published>2021-01-19T09:31:29.000Z</published>
    <updated>2021-01-20T08:12:55.577Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a>next_permutation</h1><h2 id="int型全排列"><a href="#int型全排列" class="headerlink" title="int型全排列"></a>int型全排列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span> &#125;;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(a + <span class="number">1</span>, a + <span class="number">1</span> + <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串全排列"><a href="#字符串全排列" class="headerlink" title="字符串全排列"></a>字符串全排列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s.size(); i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(s.begin(), s.end()));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/01/19/%E5%85%A8%E6%8E%92%E5%88%97next-permutation/2.png" alt="image-20210119192529699" style="zoom:67%;"><img src="/2021/01/19/%E5%85%A8%E6%8E%92%E5%88%97next-permutation/3.png" alt="image-20210119192709936" style="zoom: 80%;"><blockquote><p>参考博客 — <a href="https://www.luogu.com.cn/blog/yummy-loves-114514/solution-p1088">火星人-变进制数</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;组成的序列可以看成一个变进制数</span><br><span class="line">进制从高到低 依次为 <span class="number">7</span>-&gt;<span class="number">6</span>-&gt;<span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span> <span class="comment">//1进制只有0</span></span><br><span class="line"> 对应的权重 依次为 <span class="number">6</span>! <span class="number">5</span>! <span class="number">4</span>! <span class="number">3</span>! <span class="number">2</span>! <span class="number">1</span>! <span class="number">0</span></span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N]; </span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">int</span> x=a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=a[i];j++)</span><br><span class="line">            x-=vis[j];</span><br><span class="line">        vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">        a[i]=x<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a[n]+=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i<span class="number">-1</span>]+=a[i]/(n-i+<span class="number">1</span>);</span><br><span class="line">        a[i]%=n-i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=a[i];j++)</span><br><span class="line">            <span class="keyword">if</span>(vis[j])</span><br><span class="line">                a[i]++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;next-permutation&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="STL" scheme="https://coincidenceboy.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>算法导论</title>
    <link href="https://coincidenceboy.github.io/2020/12/29/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    <id>https://coincidenceboy.github.io/2020/12/29/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/</id>
    <published>2020-12-29T12:07:03.000Z</published>
    <updated>2020-12-29T13:37:09.927Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="CH23-最小生成树"><a href="#CH23-最小生成树" class="headerlink" title="CH23 最小生成树"></a>CH23 最小生成树</h1><h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><blockquote><p>Prim算法的关键在于 : 维护一个点集 A 并且集合A的边总是构成一棵树(这棵树从任意节点 r 开始<strong>一直长大到覆盖V中所有节点</strong>为止)</p><ul><li>算法的每一步在连接集合A和V-A的节点的所有的边中,选择一条轻量级边加入A中.</li><li>根据推论23.2,这条规则加入的边都是对A安全的边.</li></ul></blockquote><p><img src="/2020/12/29/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/4.png" alt="image-20201229213431037"></p><h3 id="伪码实现-MST-Prim-G-w-r"><a href="#伪码实现-MST-Prim-G-w-r" class="headerlink" title="伪码实现 MST-Prim(G,w,r)"></a>伪码实现 MST-Prim(G,w,r)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> each u∈G.V</span><br><span class="line">    u.key=∞</span><br><span class="line">    u.π=NUL</span><br><span class="line">r.key=<span class="number">0</span></span><br><span class="line">Q=G.V</span><br><span class="line"><span class="keyword">while</span> Q≠∅</span><br><span class="line">    u=extract-min(Q)</span><br><span class="line">    <span class="keyword">for</span> each v∈G.Adj[u]</span><br><span class="line">    <span class="keyword">if</span> v∈Q <span class="keyword">and</span> w(u,v) &lt; v.key</span><br><span class="line">        v.π=u</span><br><span class="line">        v.key=w(u,v)</span><br><span class="line">******************************</span><br><span class="line">其实注意到队列Q也是每个节点只弹出一次,也就是说 节点被弹出一次后 后续再将该节点入队/更新等操作都没有关系</span><br><span class="line">所以上述伪代码第<span class="number">9</span>行可以去掉条件v∈Q 只保留 <span class="keyword">if</span> w(u,v) &lt; v.key</span><br><span class="line">    这样的话 跟Dijstra伪码是一致的</span><br><span class="line"><span class="comment">//注意算法第5行之后,我们不会再向队列Q中insert节点,即每个节点加入队列和被抽取的次数均1次.</span></span><br><span class="line"><span class="comment">//但是具体实现的时候,去更新已经入队的元素的关键字不易,我们可以在每次更新的时候都插入一次(相当于更新操作),</span></span><br><span class="line"><span class="comment">//但是只从队列中抽取一次.</span></span><br></pre></td></tr></table></figure><hr><h1 id="CH24-单源最短路"><a href="#CH24-单源最短路" class="headerlink" title="CH24 单源最短路"></a>CH24 单源最短路</h1><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><blockquote><p>Dijkstra算法的关键在于 : 维护一个点集 S</p><ul><li>点集S : 从源点s到该点集中任意节点之间的最短路径已经找到 . 同样de , 点集 V-S 中任意一点u dis[u]也表示s到u的最短路径 (<strong>但该最短路径仅经过集合S中的点</strong>)</li><li>算法重复从节点集 V-S 中选择最短路径估计最小的节点u加入集合S , 并且对所有从u出发的边进行松弛操作.</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">initialize-single-source(G,s)</span><br><span class="line"><span class="keyword">for</span> each vertex v∈G,V</span><br><span class="line">    v.d=∞</span><br><span class="line">    v.π=NIL</span><br><span class="line">s.d=<span class="number">0</span></span><br><span class="line">*****************************</span><br><span class="line">relax(u,v,w)</span><br><span class="line"><span class="keyword">if</span> v.d&gt;u.d+w</span><br><span class="line">    v.d=u.d+w</span><br><span class="line">    v.π=u</span><br><span class="line">*****************************</span><br></pre></td></tr></table></figure><h3 id="伪码实现"><a href="#伪码实现" class="headerlink" title="伪码实现"></a>伪码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">initialize-single-source(G,s)</span><br><span class="line">S=∅</span><br><span class="line">Q=G.V</span><br><span class="line"><span class="keyword">while</span> Q≠∅</span><br><span class="line">    u=extract-min(Q) <span class="comment">//从堆Q中删除最小关键字的元素(每个节点的关键字为其d值</span></span><br><span class="line">    S=S∪&#123;u&#125;</span><br><span class="line">    <span class="keyword">for</span> each vertex v∈G.Adj[u]</span><br><span class="line">        relax(u,v,w) <span class="comment">//relax的时候优先队列Q里的关键字相应的改变</span></span><br><span class="line"><span class="comment">//注意算法第3行之后,我们不会再向队列Q中insert节点,即每个节点加入队列和被抽取的次数均1次.</span></span><br><span class="line"><span class="comment">//但是具体实现的时候,去更新已经入队的元素的关键字不易,我们可以在每次更新的时候都插入一次(相当于更新操作),</span></span><br><span class="line"><span class="comment">//但是只从队列中抽取一次.</span></span><br></pre></td></tr></table></figure><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p><img src="/2020/12/29/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/3.png" alt="image-20201229210326024"></p><p><img src="/2020/12/29/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/2.png" alt="image-20201229210546920"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;CH23-最小生成树&quot;&gt;&lt;a href=&quot;#C</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="算法导论" scheme="https://coincidenceboy.github.io/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>强连通分量Kosaraju</title>
    <link href="https://coincidenceboy.github.io/2020/12/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FKosaraju/"/>
    <id>https://coincidenceboy.github.io/2020/12/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FKosaraju/</id>
    <published>2020-12-27T04:36:59.000Z</published>
    <updated>2020-12-27T14:11:31.937Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="DFS后序"><a href="#DFS后序" class="headerlink" title="DFS后序"></a>DFS后序</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> d[N], f[N], dcnt, fcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//原本d[u]=++time;记录的是发现时间</span></span><br><span class="line">    d[++dcnt] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//原本f[u]=++time;记录的是完成时间</span></span><br><span class="line">    f[++fcnt] = u;<span class="comment">//dfs后序,相当于是按完成时间小--&gt;大依次存储</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//省略点,边的声明</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            dfs(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="强连通分量-SCC"><a href="#强连通分量-SCC" class="headerlink" title="强连通分量(SCC)"></a>强连通分量(SCC)</h1><blockquote><p>相关概念:</p><ul><li>强连通:有向图G中任意两点u–&gt;v v–&gt;u都可达.</li><li>强连通分量(scc):极大的强连通子图</li></ul></blockquote><img src="/2020/12/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FKosaraju/2.png" alt="image-20201227140143478" style="zoom:80%;"><h2 id="Kosaraju板子"><a href="#Kosaraju板子" class="headerlink" title="Kosaraju板子"></a>Kosaraju板子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有数组的下标均从1开始</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, next;</span><br><span class="line">&#125;e1[M], e2[M];</span><br><span class="line"><span class="keyword">int</span> cnt1, cnt2, head1[N], head2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt1++;</span><br><span class="line">    e1[cnt1].v = v, e1[cnt1].next = head1[u];</span><br><span class="line">    head1[u] = cnt1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt2++;</span><br><span class="line">    e2[cnt2].v = v, e2[cnt2].next = head2[u];</span><br><span class="line">    head2[u] = cnt2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kosaraju-dfs</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> f[N], fcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head1[u]; ~i; i = e1[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e1[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            dfs1(v);</span><br><span class="line">    &#125;</span><br><span class="line">    f[++fcnt] = u;<span class="comment">//dfs后序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> snum[N];<span class="comment">//snum[i]记录:节点i 所在的scc的序号</span></span><br><span class="line"><span class="keyword">int</span> scc[N], scnt;<span class="comment">//scnt--&gt;scc计数器 scc[i]--&gt;第i个scc里包含节点数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    snum[u] = scnt;</span><br><span class="line">    scc[scnt]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head2[u]; ~i; i = e2[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e2[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!snum[v])</span><br><span class="line">            dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一遍dfs---&gt;生成dfs后序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs1(i);</span><br><span class="line">    <span class="comment">//第二遍dfs---&gt;在反图中按dfs逆后序 遍历构成SCC</span></span><br><span class="line">    <span class="comment">//逆后序起到了类似 拓扑序 的作用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (!snum[f[i]])</span><br><span class="line">            scnt++, dfs2(f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//链式前向星-初始化</span></span><br><span class="line">    cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head1, <span class="number">-1</span>, <span class="keyword">sizeof</span> head1);</span><br><span class="line">    <span class="built_in">memset</span>(head2, <span class="number">-1</span>, <span class="keyword">sizeof</span> head2);</span><br><span class="line">    <span class="comment">//kosaraju--dfs-初始化</span></span><br><span class="line">    fcnt = <span class="number">0</span>, scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(scc, <span class="number">0</span>, <span class="keyword">sizeof</span> scc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题–班长竞选"><a href="#例题–班长竞选" class="headerlink" title="例题–班长竞选"></a>例题–班长竞选</h2><p><img src="/2020/12/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FKosaraju/3.png" alt="image-20201227151059804"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>有向图通常<strong>考虑SCC并缩点</strong>,即将<strong>互相可达 与 单向可达 分开考虑.</strong></p><ul><li>缩点后,不难发现对于 属于第i个SCC的点来说 , 票数的构成分为两部分(令SCC[i]表示第i个SCC中点的个数)<ol><li>当前SCC中的点, ans += SCC[I] - 1;(去掉自己)</li><li>其他SCC中的点, ans += sum(SCC[j]) 其中 j—&gt;i 可达</li></ol></li><li>稍加思考可以发现,<strong>缩点后变成一个DAG(有向无环图)</strong>,最后答案一定出现在 <strong>出度为0</strong> 的 SCC中,因为具有传递性, 所以 如果出度不为0,你指向的SCC会继承你之前的票数并加上你本身</li></ul></blockquote><blockquote><p>对于ans如何求取比较方便?</p><ol><li>缩点之后,将图反向   (或者 直接<strong>在反图中缩点</strong>)</li><li>原本答案出现在 <strong>出度为0</strong> 的SCC们 变成了 <strong>入度为0</strong> 的SCC们 , 用dfs搜一遍 并且记录 个数.</li></ol></blockquote><p><img src="/2020/12/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8FKosaraju/4.png" alt="image-20201227160022311"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, next;</span><br><span class="line">&#125;e1[M], e2[M], e[M];</span><br><span class="line"><span class="keyword">int</span> cnt1, cnt2, head1[N], head2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt1++;</span><br><span class="line">    e1[cnt1].v = v, e1[cnt1].next = head1[u];</span><br><span class="line">    head1[u] = cnt1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt2++;</span><br><span class="line">    e2[cnt2].v = v, e2[cnt2].next = head2[u];</span><br><span class="line">    head2[u] = cnt2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kosaraju-dfs</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> f[N], fcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head1[u]; ~i; i = e1[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e1[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            dfs1(v);</span><br><span class="line">    &#125;</span><br><span class="line">    f[++fcnt] = u;<span class="comment">//f[1到fcnt]记录dfs后序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> snum[N];<span class="comment">//snum[i]记录:节点i 所在的scc的序号</span></span><br><span class="line"><span class="keyword">int</span> scc[N], scnt;<span class="comment">//scnt--&gt;scc计数器 scc[i]--&gt;第i个scc里包含节点数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    snum[u] = scnt;</span><br><span class="line">    scc[scnt]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head2[u]; ~i; i = e2[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e2[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!snum[v])</span><br><span class="line">            dfs2(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一遍dfs---&gt;生成dfs后序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) dfs1(i);</span><br><span class="line">    <span class="comment">//第二遍dfs---&gt;在反图中按dfs逆后序 遍历构成SCC</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (!snum[f[i]])</span><br><span class="line">            scnt++, dfs2(f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt, head[N], in_deg[N];</span><br><span class="line"><span class="comment">//缩点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    e[cnt].v = v, e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    in_deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shrink</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head2[i]; ~j; j = e2[j].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e2[j].v;</span><br><span class="line">            <span class="keyword">if</span> (snum[i] == snum[v])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            add(snum[i], snum[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dfs计算票数</span></span><br><span class="line"><span class="keyword">int</span> temp, ans[N];</span><br><span class="line"><span class="keyword">bool</span> flag[N];<span class="comment">//用于dfs搜索</span></span><br><span class="line"><span class="keyword">bool</span> maxscc[N];<span class="comment">//用于标记scc 是不是最多票数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    temp += scc[u];</span><br><span class="line">    flag[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!flag[v]) dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//链式前向星-初始化</span></span><br><span class="line">    cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head1, <span class="number">-1</span>, <span class="keyword">sizeof</span> head1);</span><br><span class="line">    <span class="built_in">memset</span>(head2, <span class="number">-1</span>, <span class="keyword">sizeof</span> head2);</span><br><span class="line">    <span class="comment">//缩点建新图-初始化</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(in_deg, <span class="number">0</span>, <span class="keyword">sizeof</span> in_deg);</span><br><span class="line">    <span class="comment">//kosaraju  dfs-初始化</span></span><br><span class="line">    fcnt = <span class="number">0</span>, scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(scc, <span class="number">0</span>, <span class="keyword">sizeof</span> scc);</span><br><span class="line">    <span class="built_in">memset</span>(snum, <span class="number">0</span>, <span class="keyword">sizeof</span> snum);</span><br><span class="line">    <span class="comment">//计算票数</span></span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="built_in">memset</span>(maxscc, <span class="number">0</span>, <span class="keyword">sizeof</span> maxscc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> case_num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">while</span> (m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            u++, v++;<span class="comment">//将节点0到n-1 转化为 1到n</span></span><br><span class="line">            add1(u, v);</span><br><span class="line">            add2(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        kosaraju();</span><br><span class="line">        <span class="comment">//此时snum[i]记录:节点i 所在的scc的序号</span></span><br><span class="line">        <span class="comment">//scnt--&gt;scc计数器 scc[i]--&gt;第i个scc里包含节点数</span></span><br><span class="line">        shrink();<span class="comment">//在反图中缩点</span></span><br><span class="line">        <span class="comment">//此时节点从1-n变为1-scnt 边数(cnt)仅包含 不同scc之间的边(节点1到节点scnt之间相连)</span></span><br><span class="line">        <span class="comment">//in_deg[1-scnt] 记录了新图节点的入度</span></span><br><span class="line">        <span class="keyword">int</span> maxans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= scnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_deg[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span> flag);</span><br><span class="line">                dfs(i);</span><br><span class="line">                ans[i] = (temp - <span class="number">1</span>);</span><br><span class="line">                maxans = max(ans[i], maxans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= scnt; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i] == maxans)</span><br><span class="line">                maxscc[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; case_num++ &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; maxans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">bool</span> space = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxscc[snum[i]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!space)</span><br><span class="line">                    space = <span class="literal">true</span>, <span class="built_in">cout</span> &lt;&lt; i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;DFS后序&quot;&gt;&lt;a href=&quot;#DFS后序&quot;</summary>
      
    
    
    
    <category term="图论" scheme="https://coincidenceboy.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="强连通分量" scheme="https://coincidenceboy.github.io/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>B样条</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/B%E6%A0%B7%E6%9D%A1/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/B%E6%A0%B7%E6%9D%A1/</id>
    <published>2020-12-23T09:32:04.000Z</published>
    <updated>2020-12-23T10:14:49.559Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="B样条"><a href="#B样条" class="headerlink" title="B样条"></a>B样条</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/B%E6%A0%B7%E6%9D%A1/2.png" alt="image-20201223175754930"></p><p><img src="/2020/12/23/B%E6%A0%B7%E6%9D%A1/3.png" alt="image-20201223175843274"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">1020</span>;</span><br><span class="line"><span class="keyword">int</span> site_top = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; input;</span><br><span class="line"><span class="keyword">int</span> nowid;<span class="comment">//用于鼠标移动</span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">3</span>;<span class="comment">//定义阶数k=3阶  k-1次</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> x = input[i].x, y = input[i].y;</span><br><span class="line">    <span class="keyword">if</span> (tx &gt;= x - num &amp;&amp; tx &lt;= x + num &amp;&amp; ty &gt;= y - num &amp;&amp; ty &lt;= y + num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区 </span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawOnePoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">4</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glVertex2d(x, y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glLineWidth(<span class="number">1</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2i(x1, y1);</span><br><span class="line">    glVertex2i(x2, y2);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//缓冲区重绘</span></span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">//控制点重绘</span></span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">4</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= input.size() - <span class="number">1</span>; i++)</span><br><span class="line">        glVertex2d(input[i].x, input[i].y);</span><br><span class="line">    glEnd();</span><br><span class="line">    <span class="comment">//特征多边形重绘</span></span><br><span class="line">    glLineWidth(<span class="number">1</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= input.size() - <span class="number">1</span>; i++)</span><br><span class="line">        drawLine(input[i - <span class="number">1</span>].x, input[i - <span class="number">1</span>].y, input[i].x, input[i].y);</span><br><span class="line">    glEnd();</span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">de_Boor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">de_Boor_id</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span> <span class="comment">//x,y均是以窗口左上角为（0,0）的像素表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    x = nowx, y = WinH - nowy;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(i, x, y))</span><br><span class="line">        &#123;</span><br><span class="line">            id = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//insert</span></span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT_BUTTON &amp;&amp; state == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            drawOnePoint(x, y);</span><br><span class="line">            input.push_back(point(x, y));</span><br><span class="line">            nowid = input.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nowid &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                drawLine(input[nowid - <span class="number">1</span>].x, input[nowid - <span class="number">1</span>].y, input[nowid].x, input[nowid].y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (input.size() &gt;= k) de_Boor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nowid = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画出B样条</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (button == GLUT_MIDDLE_BUTTON &amp;&amp; state == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        redraw();</span><br><span class="line">        <span class="keyword">if</span> (input.size() &gt;= k) de_Boor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (button == GLUT_RIGHT_BUTTON &amp;&amp; state == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nowid = id;</span><br><span class="line">            input.erase(input.begin() + nowid);</span><br><span class="line">            redraw();</span><br><span class="line">            <span class="keyword">if</span> (input.size() &gt;= k) </span><br><span class="line">                de_Boor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMotion</span><span class="params">(<span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = nowx, y = WinH - nowy;</span><br><span class="line">    input[nowid].x = x, input[nowid].y = y;</span><br><span class="line">    <span class="keyword">if</span> (input.size() &gt;= k)</span><br><span class="line">    &#123;</span><br><span class="line">        redraw();</span><br><span class="line">        de_Boor();</span><br><span class="line">        de_Boor_id(nowid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyBoards</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">107</span>||key == <span class="number">75</span>) <span class="comment">//k || K</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入k值:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        <span class="keyword">if</span> (input.size() &gt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B样条已重绘&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            redraw();</span><br><span class="line">            de_Boor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;交互贝塞尔曲线-Bezier&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH);<span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 鼠标左键点击  -----&gt; 绘制特征多边形&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;   鼠标中键    -----&gt; 画出B样条曲线&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;   鼠标右键    -----&gt; 删除指向特征点&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 鼠标左键拖拽  -----&gt; 重绘B样条曲线&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;键盘输入k或者K -----&gt; 指定k值并重绘&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    glutMotionFunc(mouseMotion);<span class="comment">//事件3：鼠标移动</span></span><br><span class="line">    glutKeyboardFunc(&amp;keyBoards);<span class="comment">//事件4：监听键盘</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    point() &#123; x = <span class="number">-1</span>, y = <span class="number">-1</span>; &#125;</span><br><span class="line">    point(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1) &#123; x = x1, y = y1; &#125;</span><br><span class="line">    point <span class="keyword">operator</span> * (<span class="keyword">double</span> t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(t * x, t * y);</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span> + (point p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> point(x + p.x, y + p.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="B样条-cpp"><a href="#B样条-cpp" class="headerlink" title="B样条.cpp"></a>B样条.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;point&gt;input;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; T;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; P;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw_Bline</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">252.0</span> / <span class="number">255</span>, <span class="number">157.0</span> / <span class="number">255</span>, <span class="number">154.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">1</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.size(); i++)</span><br><span class="line">        glVertex2d(out[i].x, out[i].y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_Boor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt; next;</span><br><span class="line">    T.clear(); ans.clear(); P.clear();</span><br><span class="line">    point tmp;</span><br><span class="line">    <span class="keyword">int</span> n = input.size()<span class="number">-1</span>; </span><br><span class="line">    <span class="comment">//所以控制点数为 n+1</span></span><br><span class="line">    <span class="comment">//区间均匀B样条</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + k; i++) </span><br><span class="line">        T.push_back(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = k - <span class="number">1</span>; j &lt;= n; j++)<span class="comment">//枚举区间j </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> t = T[j]; t &lt; T[j + <span class="number">1</span>]; t += <span class="number">0.001</span>) <span class="comment">//先把t固定在区间[t j,t j+1]上</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//r=0时,0次Pi(t) = p[i]  并且  i= j - k + 1; i &lt;= j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j - k + <span class="number">1</span>; i &lt;= j; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                P.push_back(input[i]);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//r= 1 到 k-1 时,即r次Pi(t)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= k - <span class="number">1</span>; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = j - k + r + <span class="number">1</span>; i &lt;= j; i++) </span><br><span class="line">                &#123;</span><br><span class="line">                    tmp = P[i - (j - k + r + <span class="number">1</span>) + <span class="number">1</span>] * ((t - T[i]) / (T[i + k - r] - T[i])) + P[i - (j - k + r + <span class="number">1</span>)] * ((T[i + k - r] - t) / (T[i + k - r] - T[i])); <span class="comment">//* (p[i + 1][r - 1]);</span></span><br><span class="line">                    next.push_back(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                P = next;</span><br><span class="line">                next.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后为r次P</span></span><br><span class="line">            ans.push_back(P[<span class="number">0</span>]);</span><br><span class="line">            P.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    draw_Bline(ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_Boor_id</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt; next;</span><br><span class="line">    ans.clear();</span><br><span class="line">    point tmp;</span><br><span class="line">    <span class="keyword">int</span> n = input.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//所以控制点数为 n+1</span></span><br><span class="line">    <span class="keyword">int</span> a = max(id, k - <span class="number">1</span>), b = min(id + k - <span class="number">1</span>, n);</span><br><span class="line">    <span class="comment">//会影响到的区间数目</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = a; j &lt;= b; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> t = T[j]; t &lt; T[j + <span class="number">1</span>]; t += <span class="number">0.001</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j - k + <span class="number">1</span>; i &lt;= j; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                P.push_back(input[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= k - <span class="number">1</span>; r++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = j - k + r + <span class="number">1</span>; i &lt;= j; i++) &#123;</span><br><span class="line">                    tmp = P[i - (j - k + r + <span class="number">1</span>) + <span class="number">1</span>] * ((t - T[i]) / (T[i + k - r] - T[i])) + P[i - (j - k + r + <span class="number">1</span>)] * ((T[i + k - r] - t) / (T[i + k - r] - T[i])); <span class="comment">//* (p[i + 1][r - 1]);</span></span><br><span class="line">                    next.push_back(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                P = next;</span><br><span class="line">                next.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(P[<span class="number">0</span>]);</span><br><span class="line">            P.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    draw_Bline(ans);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;B样条&quot;&gt;&lt;a href=&quot;#B样条&quot; cla</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="B样条" scheme="https://coincidenceboy.github.io/tags/B%E6%A0%B7%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Bezier曲线</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/Bezier%E6%9B%B2%E7%BA%BF/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/Bezier%E6%9B%B2%E7%BA%BF/</id>
    <published>2020-12-23T09:31:52.000Z</published>
    <updated>2020-12-23T10:13:37.856Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="Bezier曲线"><a href="#Bezier曲线" class="headerlink" title="Bezier曲线"></a>Bezier曲线</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/Bezier%E6%9B%B2%E7%BA%BF/2.png" alt="image-20201223175452153"></p><p><img src="/2020/12/23/Bezier%E6%9B%B2%E7%BA%BF/3.png" alt="image-20201223175614794"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> site_top = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; input;</span><br><span class="line"><span class="keyword">int</span> nowid;<span class="comment">//用于鼠标移动</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> x = input[i].x, y = input[i].y;</span><br><span class="line">    <span class="keyword">if</span> (tx &gt;= x - num &amp;&amp; tx &lt;= x + num &amp;&amp; ty &gt;= y - num &amp;&amp; ty &lt;= y + num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区 </span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawOnePoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">4</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glVertex2d(x, y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glLineWidth(<span class="number">1</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2i(x1, y1);</span><br><span class="line">    glVertex2i(x2, y2);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//缓冲区重绘</span></span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line">    <span class="comment">//控制点重绘</span></span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">4</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= input.size() - <span class="number">1</span>; i++)</span><br><span class="line">        glVertex2d(input[i].x, input[i].y);</span><br><span class="line">    glEnd();</span><br><span class="line">    <span class="comment">//特征多边形重绘</span></span><br><span class="line">    glLineWidth(<span class="number">1</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= input.size() - <span class="number">1</span>; i++)</span><br><span class="line">        drawLine(input[i - <span class="number">1</span>].x, input[i - <span class="number">1</span>].y, input[i].x, input[i].y);</span><br><span class="line">    glEnd();</span><br><span class="line">    </span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Bezier</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span> <span class="comment">//x,y均是以窗口左上角为（0,0）的像素表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    x = nowx, y = WinH - nowy;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(i, x, y)) </span><br><span class="line">        &#123;</span><br><span class="line">            id = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//insert</span></span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT_BUTTON &amp;&amp; state == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            drawOnePoint(x, y);</span><br><span class="line">            input.push_back(point(x, y));</span><br><span class="line">            nowid = input.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nowid &gt;= <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                drawLine(input[nowid - <span class="number">1</span>].x, input[nowid - <span class="number">1</span>].y, input[nowid].x, input[nowid].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nowid = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画出Bezier</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (button == GLUT_MIDDLE_BUTTON &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123; </span><br><span class="line">        redraw();</span><br><span class="line">        Bezier();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (button == GLUT_RIGHT_BUTTON &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id != <span class="number">-1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            nowid = id;</span><br><span class="line">            input.erase(input.begin() + nowid);</span><br><span class="line">            redraw();</span><br><span class="line">            Bezier();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMotion</span><span class="params">(<span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = nowx, y = WinH - nowy;</span><br><span class="line">    input[nowid].x = x, input[nowid].y = y;</span><br><span class="line">    redraw();</span><br><span class="line">    Bezier();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;交互贝塞尔曲线-Bezier&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH);<span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;鼠标左键点击 -----&gt; 绘制特征多边形&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  鼠标中键   -----&gt; 画出Bezier曲线&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  鼠标右键   -----&gt; 删除指向特征点&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;鼠标左键拖拽 -----&gt; 重绘Bezier曲线&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    glutMotionFunc(mouseMotion);<span class="comment">//事件3：鼠标移动</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    point() &#123; x = <span class="number">-1</span>, y = <span class="number">-1</span>; &#125;</span><br><span class="line">    point(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1) &#123; x = x1, y = y1; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Bezier-cpp"><a href="#Bezier-cpp" class="headerlink" title="Bezier.cpp"></a>Bezier.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line">point p[maxn][maxn];</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;point&gt;input;</span><br><span class="line"><span class="function">point <span class="title">De_Casteljau</span><span class="params">(<span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//递推公式 p[i][0] = input[i](控制点)                   k=0</span></span><br><span class="line"><span class="comment">//       p[i][k] = (1-t)*p[i][k-1] + t*p[i+1][k-1]k&gt;0</span></span><br><span class="line">    <span class="keyword">int</span> n = input.size() - <span class="number">1</span>;   <span class="comment">//input n+1个控制点 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">                p[i][<span class="number">0</span>].x = input[i].x,</span><br><span class="line">                p[i][<span class="number">0</span>].y = input[i].y;  <span class="comment">//初始化p[i][0]</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p[i][j].x = <span class="number">0</span>, p[i][j].y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//n次Bezier 即： p[0][n] 关于t的表达式 多次传入参数t即可绘制Bezier曲线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            p[i][k].x = (<span class="number">1</span> - t) * p[i][k - <span class="number">1</span>].x + t * p[i + <span class="number">1</span>][k - <span class="number">1</span>].x;</span><br><span class="line">            p[i][k].y = (<span class="number">1</span> - t) * p[i][k - <span class="number">1</span>].y + t * p[i + <span class="number">1</span>][k - <span class="number">1</span>].y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[<span class="number">0</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bezier</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">252.0</span> / <span class="number">255</span>, <span class="number">157.0</span> / <span class="number">255</span>, <span class="number">154.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">2</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> t = <span class="number">0</span>; t &lt;= <span class="number">1.0</span>; t += <span class="number">0.001</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = De_Casteljau(t).x;</span><br><span class="line">        <span class="keyword">double</span> y = De_Casteljau(t).y;</span><br><span class="line">        glVertex2d(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Bezier曲线&quot;&gt;&lt;a href=&quot;#Bez</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="Bezier曲线" scheme="https://coincidenceboy.github.io/tags/Bezier%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>扫描线填充多边形算法</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/%E6%89%AB%E6%8F%8F%E7%BA%BF%E5%A1%AB%E5%85%85%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/%E6%89%AB%E6%8F%8F%E7%BA%BF%E5%A1%AB%E5%85%85%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-23T09:31:22.000Z</published>
    <updated>2020-12-23T10:12:11.661Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="扫描线填充多边形算法"><a href="#扫描线填充多边形算法" class="headerlink" title="扫描线填充多边形算法"></a>扫描线填充多边形算法</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/%E6%89%AB%E6%8F%8F%E7%BA%BF%E5%A1%AB%E5%85%85%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%AE%97%E6%B3%95/2.png" alt="image-20201223175153594"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">550</span>, site_top = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> WinW = <span class="number">500</span>, WinH = <span class="number">450</span>;</span><br><span class="line"><span class="comment">//画 多边形边界</span></span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt;input;  <span class="comment">//鼠标键入的多边形各点</span></span><br><span class="line"><span class="keyword">int</span> nowid;</span><br><span class="line"><span class="keyword">bool</span> already = <span class="literal">false</span>;<span class="comment">//封闭之后屏蔽鼠标操作</span></span><br><span class="line"><span class="comment">//ScanLine要用到NET(新边表)AET(活动边表)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;NET[<span class="number">1005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt;AET;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt;l;<span class="comment">//多边形各边界</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区</span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span><span class="comment">//画多边形边界</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);<span class="comment">//边界线段颜色</span></span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glLineWidth(<span class="number">3</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2d(x0, y0);</span><br><span class="line">    glVertex2d(x1, y1);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> x = input[i].x, y = input[i].y;</span><br><span class="line">    <span class="keyword">if</span> (tx &gt;= x - num &amp;&amp; tx &lt;= x + num &amp;&amp; ty &gt;= y - num &amp;&amp; ty &lt;= y + num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ScanLine</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> minyy=<span class="number">0</span>, maxyy=WinH;<span class="comment">//记录特征多边形的y_min和y_max</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    x = nowx, y = WinH - nowy;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-1</span>;<span class="comment">//是否封闭，即回到起始点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(i, x, y))</span><br><span class="line">        &#123;</span><br><span class="line">            id = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span> &amp;&amp; !already) </span><br><span class="line">        &#123;</span><br><span class="line">            input.push_back(point(x, y));</span><br><span class="line">            minyy = min(minyy, y);</span><br><span class="line">            maxyy = max(maxyy, y);</span><br><span class="line">            nowid = input.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nowid &gt;= <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                drawLine(input[nowid - <span class="number">1</span>].x, input[nowid - <span class="number">1</span>].y, input[nowid].x, input[nowid].y);</span><br><span class="line">                l.push_back(line(input[nowid - <span class="number">1</span>].x, input[nowid - <span class="number">1</span>].y, input[nowid].x, input[nowid].y));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (id != <span class="number">-1</span> &amp;&amp; !already) </span><br><span class="line">        &#123;</span><br><span class="line">            already = <span class="literal">true</span>;</span><br><span class="line">            nowid = input.size() - <span class="number">1</span>;</span><br><span class="line">            drawLine(input[nowid].x, input[nowid].y, input[id].x, input[id].y);</span><br><span class="line">            l.push_back(line(input[id].x, input[id].y, input[nowid].x, input[nowid].y));</span><br><span class="line">            </span><br><span class="line">            ScanLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;扫描线填充算法&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH); <span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    <span class="comment">//glutMotionFunc(mouseMotion);//事件3：鼠标移动</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    point() &#123; x = <span class="number">-1</span>, y = <span class="number">-1</span>; &#125;</span><br><span class="line">    point(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) &#123; x = x1, y = y1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="comment">//AET和NET所用的节点</span></span><br><span class="line">    <span class="keyword">double</span> xi; <span class="keyword">double</span> dx; <span class="keyword">int</span> ymax;</span><br><span class="line">    node(<span class="keyword">double</span> _xi, <span class="keyword">double</span> _dx, <span class="keyword">int</span> _ymax) :xi(_xi), dx(_dx), ymax(_ymax) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node x) &#123; <span class="keyword">return</span> xi &lt; x.xi; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    point a, b;</span><br><span class="line">    <span class="keyword">bool</span> is_flat = <span class="literal">false</span>;<span class="comment">//多边形边界是否是直线</span></span><br><span class="line">    line() &#123;&#125;;</span><br><span class="line">    line(point x, point y) </span><br><span class="line">    &#123;</span><br><span class="line">        a = x, b = y;</span><br><span class="line">        <span class="keyword">if</span> (a.y != b.y) is_flat = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> is_flat = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    line(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span><br><span class="line">    &#123;</span><br><span class="line">        a.x = x1, a.y = y1, b.x = x2, b.y = y2;</span><br><span class="line">        <span class="keyword">if</span> (a.y != b.y) is_flat = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> is_flat = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">miny</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.y &lt; b.y) <span class="keyword">return</span> a.y;</span><br><span class="line">        <span class="keyword">return</span> b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.y &gt; b.y) <span class="keyword">return</span> a.y;</span><br><span class="line">        <span class="keyword">return</span> b.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_xi</span><span class="params">(<span class="keyword">int</span> _y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_y == a.y) <span class="keyword">return</span> a.x;</span><br><span class="line">        <span class="keyword">return</span> b.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dx</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (is_flat) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> k = <span class="keyword">double</span>((b.y - a.y) * <span class="number">1.0</span> / (b.x - a.x));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span> / k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="扫描线填充算法"><a href="#扫描线填充算法" class="headerlink" title="扫描线填充算法"></a>扫描线填充算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">double</span> x1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">252.0</span> / <span class="number">255</span>, <span class="number">157.0</span> / <span class="number">255</span>, <span class="number">154.0</span> / <span class="number">255</span>);<span class="comment">//扫描填充线段颜色</span></span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glLineWidth(<span class="number">1.0</span>);   <span class="comment">//扫描线</span></span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2d(x1, y);</span><br><span class="line">    glVertex2d(x2, y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;node&gt;NET[<span class="number">455</span>];</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;node&gt;AET;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;line&gt;l;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> WinH;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> minyy, maxyy;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ScanLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//初始化NET</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nowy = minyy; nowy &lt;= maxyy; nowy++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l[i].miny() == nowy) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (l[i].is_flat) </span><br><span class="line">                    <span class="keyword">continue</span>;<span class="comment">//如果特征多边形的边与扫描线重合，即边界是平的,则跳过该边界</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">double</span> xi = l[i].get_xi(nowy);</span><br><span class="line">                <span class="keyword">double</span> dx = l[i].dx();</span><br><span class="line">                <span class="keyword">int</span> ymax = l[i].maxy();</span><br><span class="line">                NET[nowy].push_back(node(xi, dx, ymax));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> nowy = minyy; nowy &lt;= maxyy; nowy++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NET[nowy].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            AET.push_back(NET[nowy][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(AET.begin(), AET.end());</span><br><span class="line">        <span class="comment">//根据活性表 画 y=nowy 的填充线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AET.size(); i += <span class="number">2</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> x1 = AET[i].xi, x2 = AET[i + <span class="number">1</span>].xi;</span><br><span class="line">            draw(x1, x2, nowy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为下一条扫描线更新AET</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; AET.size(); i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//检查是否需要删除node</span></span><br><span class="line">            <span class="keyword">if</span> (AET[i].ymax == nowy + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                AET.erase(AET.begin() + i);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//该节点不需要删除的话 则更新node(x,dx,ymax)----&gt;node(x+dx,dx,ymax)</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (AET[i].ymax &gt; nowy) </span><br><span class="line">            &#123;</span><br><span class="line">                AET[i].xi += AET[i].dx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;扫描线填充多边形算法&quot;&gt;&lt;a href=&quot;#扫</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="扫描线填充多边形算法" scheme="https://coincidenceboy.github.io/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF%E5%A1%AB%E5%85%85%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Southerland-Hodgeman 多边形裁剪</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/Southerland-Hodgeman-%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/Southerland-Hodgeman-%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA/</id>
    <published>2020-12-23T09:30:54.000Z</published>
    <updated>2020-12-23T10:09:47.562Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="Southerland-Hodgeman多边形裁剪"><a href="#Southerland-Hodgeman多边形裁剪" class="headerlink" title="Southerland-Hodgeman多边形裁剪"></a>Southerland-Hodgeman多边形裁剪</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/Southerland-Hodgeman-%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA/2.png" alt="image-20201223174559425"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="main-cpp-vis改进-可以裁剪所有凹多边形"><a href="#main-cpp-vis改进-可以裁剪所有凹多边形" class="headerlink" title="main.cpp (vis改进,可以裁剪所有凹多边形)"></a>main.cpp (vis改进,可以裁剪所有凹多边形)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> site_top = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="keyword">int</span> vis[WinW][WinH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glRectf(<span class="number">100</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">360</span>);<span class="comment">//左下 右上（横、纵左边） </span></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;point&gt;now;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;point&gt;out;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;line&gt;ans;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Polygon_clipping</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> already = <span class="literal">false</span>;<span class="comment">//特征多边形绘制结束之后，屏蔽鼠标操作</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> cnt, nowid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> x = now[i].x, y = now[i].y;</span><br><span class="line">    <span class="keyword">if</span> (tx &gt;= x - num &amp;&amp; tx &lt;= x + num &amp;&amp; ty &gt;= y - num &amp;&amp; ty &lt;= y + num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(<span class="keyword">double</span> x0, <span class="keyword">double</span> y0, <span class="keyword">double</span> x1, <span class="keyword">double</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">252.0</span> / <span class="number">255</span>, <span class="number">157.0</span> / <span class="number">255</span>, <span class="number">154.0</span> / <span class="number">255</span>);</span><br><span class="line">    glLineWidth(<span class="number">2</span>);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2d(x0, y0);</span><br><span class="line">    glVertex2d(x1, y1);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span> <span class="comment">//x,y均是以窗口左上角为（0,0）的像素表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = nowx, y = WinH - nowy;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-1</span>; <span class="comment">//是否封闭，即回到起始点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(now.size()); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(i, x, y)) </span><br><span class="line">        &#123;</span><br><span class="line">            id = i; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//already 用来 特征多边形绘制结束之后，屏蔽鼠标操作</span></span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span> &amp;&amp; !already) </span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            now.push_back(point(x, y));</span><br><span class="line">            nowid = now.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nowid &gt;= <span class="number">1</span>) </span><br><span class="line">                drawLine(now[nowid - <span class="number">1</span>].x, now[nowid - <span class="number">1</span>].y, now[nowid].x, now[nowid].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (id != <span class="number">-1</span> &amp;&amp; !already) </span><br><span class="line">        &#123;</span><br><span class="line">            already = <span class="literal">true</span>;</span><br><span class="line">            nowid = now.size() - <span class="number">1</span>;</span><br><span class="line">            drawLine(now[nowid].x, now[nowid].y, now[id].x, now[id].y);</span><br><span class="line">            Polygon_clipping();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;Southerland多边形裁剪算法&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH);<span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    <span class="comment">//glutMotionFunc(mouseMotion);//事件3：鼠标移动</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="struct-h"><a href="#struct-h" class="headerlink" title="struct.h"></a>struct.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    point() &#123; x = <span class="number">-1</span>, y = <span class="number">-1</span>; &#125;</span><br><span class="line">    point(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) &#123; x = x1, y = y1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    point a, b;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    line() &#123;&#125;;</span><br><span class="line">    line(point x, point y) &#123; a = x, b = y; &#125;</span><br><span class="line">    line(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2,<span class="built_in">string</span> s) &#123; a.x = x1, a.y = y1, b.x = x2, b.y = y2,name=s; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Southerland-cpp"><a href="#Southerland-cpp" class="headerlink" title="Southerland.cpp"></a>Southerland.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;struct.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt;now;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt;out;</span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt;ans;</span><br><span class="line"><span class="function">line <span class="title">left_line</span><span class="params">(<span class="number">100</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">360</span>,<span class="string">&quot;left&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">line <span class="title">right_line</span><span class="params">(<span class="number">400</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">360</span>,<span class="string">&quot;right&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">line <span class="title">top_line</span><span class="params">(<span class="number">100</span>, <span class="number">360</span>, <span class="number">400</span>, <span class="number">360</span>,<span class="string">&quot;top&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">line <span class="title">bottom_line</span><span class="params">(<span class="number">100</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">80</span>,<span class="string">&quot;bottom&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> vis[WinW][WinH];</span><br><span class="line"><span class="comment">//Bresenham画线算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawpixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//glColor3f(131.0 / 255, 175.0 / 255, 155.0 / 255);</span></span><br><span class="line">    vis[x][y]++;</span><br><span class="line">    glColor3f(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>);</span><br><span class="line">    glPointSize(<span class="number">3</span>);</span><br><span class="line">    glEnable(GL_POINT_SMOOTH);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glVertex2i(x, y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x0 &gt; x1 &amp;&amp; y0 &gt; y1)</span><br><span class="line">        swap(x0, x1), swap(y0, y1);</span><br><span class="line">    <span class="keyword">if</span> (x1 &gt; x0 &amp;&amp; y1 &lt; y0)</span><br><span class="line">        swap(x0, x1), swap(y0, y1);</span><br><span class="line">    <span class="keyword">int</span> nowx, nowy, dx, dy, e;</span><br><span class="line">    <span class="keyword">double</span> k;</span><br><span class="line">    <span class="keyword">if</span> (x1 != x0)</span><br><span class="line">        k = <span class="keyword">double</span>((y1 - y0) * <span class="number">1.0</span> / (x1 - x0));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k = <span class="number">-1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">-1.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min(y0, y1); i &lt;= max(y0, y1); i++)</span><br><span class="line">            drawpixel(x0, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min(x0, x1); i &lt;= max(x0, x1); i++)</span><br><span class="line">            drawpixel(i, y0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; k &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowx, nowy);</span><br><span class="line">            nowx++, e += <span class="number">2</span> * dy;</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x0, y0), swap(x1, y1);<span class="comment">//swap</span></span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowy, nowx);<span class="comment">//(nowy,nowx)</span></span><br><span class="line">            nowx++, e += <span class="number">2</span> * dy;</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; k &gt;= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= -dx; i++) <span class="comment">//-dx</span></span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowx, nowy);</span><br><span class="line">            nowx--, e += <span class="number">2</span> * dy;     <span class="comment">//nowx--</span></span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * (-dx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x0, y0), swap(x1, y1);<span class="comment">//swap</span></span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowy, nowx);  <span class="comment">//(nowy,nowx)</span></span><br><span class="line">            nowx++, e -= <span class="number">2</span> * dy;    <span class="comment">//-=</span></span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy--, e -= <span class="number">2</span> * dx;<span class="comment">//nowy--</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redraw</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*glColor3f(249.0 / 255, 205.0 / 255, 173.0 / 255);//区域线段颜色</span></span><br><span class="line"><span class="comment">glLineWidth(3);</span></span><br><span class="line"><span class="comment">glEnable(GL_LINE_SMOOTH);</span></span><br><span class="line"><span class="comment">glBegin(GL_LINES);</span></span><br><span class="line"><span class="comment">glVertex2d(x1, y1);</span></span><br><span class="line"><span class="comment">glVertex2d(x2, y2);</span></span><br><span class="line"><span class="comment">glEnd();*/</span></span><br><span class="line">    Bresenham(x1, y1, x2, y2);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">focus</span><span class="params">(point S, point P, line wall)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//求s--p与边界的交点</span></span><br><span class="line">    point p;</span><br><span class="line">    <span class="keyword">if</span> (wall.a.x == wall.b.x) </span><br><span class="line">    &#123;</span><br><span class="line">        p.x = wall.a.x;</span><br><span class="line">        p.y = S.y + (wall.a.x - S.x) * (P.y - S.y) / (P.x - S.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        p.y = wall.a.y;</span><br><span class="line">        p.x = S.x + (wall.a.y - S.y) * (P.x - S.x) / (P.y - S.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Inside</span><span class="params">(point x, line wall)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (wall.name == <span class="string">&quot;left&quot;</span> &amp;&amp; x.x &gt; wall.a.x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (wall.name == <span class="string">&quot;right&quot;</span> &amp;&amp; x.x &lt; wall.b.x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (wall.name == <span class="string">&quot;top&quot;</span> &amp;&amp; x.y &lt; wall.a.y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (wall.name == <span class="string">&quot;bottom&quot;</span> &amp;&amp; x.y &gt; wall.a.y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sutherland_Hodgman</span><span class="params">(line wall)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    out.clear();</span><br><span class="line">    point S, P;</span><br><span class="line">    S = now[now.size() - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; now.size(); i++) </span><br><span class="line">    &#123;</span><br><span class="line">        P = now[i];</span><br><span class="line">        <span class="keyword">if</span> (Inside(S, wall))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Inside(P, wall)) </span><br><span class="line">            &#123; <span class="comment">//①S 内 P 内</span></span><br><span class="line">                out.push_back(P);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;<span class="comment">//②S 内 P外</span></span><br><span class="line">                out.push_back(focus(S, P, wall)); <span class="comment">// SP</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Inside(P, wall)) </span><br><span class="line">        &#123; <span class="comment">//③ P 内 S 外</span></span><br><span class="line">            out.push_back(focus(S, P, wall));</span><br><span class="line">            out.push_back(P);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//④ S 外 P 外 不输出</span></span><br><span class="line">        S = P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Polygon_clipping</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sutherland_Hodgman(left_line);</span><br><span class="line">    now = out;</span><br><span class="line">    Sutherland_Hodgman(right_line);</span><br><span class="line">    now = out;</span><br><span class="line">    Sutherland_Hodgman(top_line);</span><br><span class="line">    now = out;</span><br><span class="line">    Sutherland_Hodgman(bottom_line);</span><br><span class="line">    <span class="comment">//用Bresenham算法画线 并且记录vis【】【】数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.size() - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        redraw(out[i].x, out[i].y, out[i + <span class="number">1</span>].x, out[i + <span class="number">1</span>].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (out.size() &gt; <span class="number">2</span>) </span><br><span class="line">        redraw(out[<span class="number">0</span>].x, out[<span class="number">0</span>].y, out[out.size() - <span class="number">1</span>].x, out[out.size() - <span class="number">1</span>].y);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过vis数组 用边界颜色 覆盖多余的边</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;WinW;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; WinH; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i][j] % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; vis[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">                glPointSize(<span class="number">3</span>);</span><br><span class="line">                glEnable(GL_POINT_SMOOTH);</span><br><span class="line">                glBegin(GL_POINTS);</span><br><span class="line">                glVertex2i(i, j);</span><br><span class="line">                glEnd();</span><br><span class="line">                glFlush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//描 端点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        glColor3f(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>);</span><br><span class="line">        glPointSize(<span class="number">4</span>);</span><br><span class="line">        glEnable(GL_POINT_SMOOTH);</span><br><span class="line">        glBegin(GL_POINTS);</span><br><span class="line">        glVertex2i(out[i].x, out[i].y);</span><br><span class="line">        glEnd();</span><br><span class="line">        glFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Southerland-Hodgeman多边形</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="Southerland-Hodgeman 多边形裁剪" scheme="https://coincidenceboy.github.io/tags/Southerland-Hodgeman-%E5%A4%9A%E8%BE%B9%E5%BD%A2%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>liang-barsky裁剪算法</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/liang-barsky%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/liang-barsky%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-23T09:30:32.000Z</published>
    <updated>2020-12-23T10:08:23.750Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="liang-barsky裁剪算法"><a href="#liang-barsky裁剪算法" class="headerlink" title="liang-barsky裁剪算法"></a>liang-barsky裁剪算法</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/liang-barsky%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/2.png" alt="image-20201223174013329"></p><p><img src="/2020/12/23/liang-barsky%E8%A3%81%E5%89%AA%E7%AE%97%E6%B3%95/3.png" alt="image-20201223174053928"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;liang-barsky.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> site_top = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    point() &#123; x = <span class="number">-1</span>, y = <span class="number">-1</span>; &#125;</span><br><span class="line">    point(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) &#123; x = x1, y = y1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">200.0</span> / <span class="number">255</span>, <span class="number">200.0</span> / <span class="number">255</span>, <span class="number">169.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区</span></span><br><span class="line">    <span class="comment">//绘制矩形裁剪框</span></span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glRectf(<span class="number">100</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">360</span>);<span class="comment">//相对于窗口正中心 四变量依次：左下 右上（横、纵左边） </span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt;v;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> cnt, nowid;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> x = v[i].x, y = v[i].y;</span><br><span class="line">    <span class="keyword">if</span> (tx &gt;= x - num &amp;&amp; tx &lt;= x + num &amp;&amp; ty &gt;= y - num &amp;&amp; ty &lt;= y + num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawline</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">252.0</span> / <span class="number">255</span>, <span class="number">157.0</span> / <span class="number">255</span>, <span class="number">154.0</span> / <span class="number">255</span>);</span><br><span class="line">    glLineWidth(<span class="number">2</span>);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2i(v[x - <span class="number">1</span>].x, v[x - <span class="number">1</span>].y);</span><br><span class="line">    glVertex2i(v[x].x, v[x].y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span> <span class="comment">//x,y均是以窗口左上角为（0,0）的像素表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = nowx, y = WinH - nowy;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(i, x, y))</span><br><span class="line">        &#123;</span><br><span class="line">            id = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT &amp;&amp; state == GLUT_DOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v.push_back(point(x, y));</span><br><span class="line">            nowid = v.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt % <span class="number">2</span> ==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                drawline(nowid);</span><br><span class="line">                liang_barsky(v[nowid - <span class="number">1</span>].x, v[nowid - <span class="number">1</span>].y, v[nowid].x, v[nowid].y, <span class="number">360</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">400</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nowid = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMotion</span><span class="params">(<span class="keyword">int</span> nowx, <span class="keyword">int</span> nowy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    v[nowid].x = nowx, v[nowid].y = <span class="number">450.0</span> - nowy;<span class="comment">//找到重绘时产生变化的那条线段</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//全部重新绘制</span></span><br><span class="line">    display();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= v.size() - <span class="number">1</span>; i += <span class="number">2</span>)</span><br><span class="line">        drawline(i), liang_barsky(v[i - <span class="number">1</span>].x, v[i - <span class="number">1</span>].y, v[i].x, v[i].y, <span class="number">360</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;liang-barsky直线裁剪算法&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH);<span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    glutMotionFunc(mouseMotion);<span class="comment">//事件3：鼠标移动</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="liang-barsky-h"><a href="#liang-barsky-h" class="headerlink" title="liang-barsky.h"></a>liang-barsky.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>);<span class="comment">//区域线段颜色</span></span><br><span class="line">    glLineWidth(<span class="number">2</span>);</span><br><span class="line">    glEnable(GL_LINE_SMOOTH);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2i(x1, y1);</span><br><span class="line">    glVertex2i(x2, y2);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">liang_barsky</span><span class="params">(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2, <span class="keyword">double</span> YT, <span class="keyword">double</span> YB, <span class="keyword">double</span> XL, <span class="keyword">double</span> XR)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//①参数方程的思想</span></span><br><span class="line"><span class="comment">//②把直线段看成一条有方向的线段。（假定方向是从x_min ---&gt; x_max）。</span></span><br><span class="line"><span class="comment">//裁剪即求 起点和终点的参数μ值 μ1 = max(0,μ入边1,μ入边2) μ2 = min(1,μ出边1,μ出边2)</span></span><br><span class="line"><span class="comment">//问题转换为---只需要判断</span></span><br><span class="line"><span class="comment">//--a.那两个边是 入边 ，哪两个边是 出边。</span></span><br><span class="line"><span class="comment">//--b.直线和窗口边界的 四个交点 的参数值如何求？</span></span><br><span class="line">    <span class="keyword">double</span> u1 = <span class="number">0</span>, u2 = <span class="number">1</span>, dx = x2 - x1, dy = y2 - y1;</span><br><span class="line">    <span class="keyword">double</span> p[<span class="number">5</span>], q[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//裁剪问题转换为 判断 点 是否在窗口内的问题。</span></span><br><span class="line">    <span class="comment">//X_left ≤ x1+μ*dx ≤ X_right</span></span><br><span class="line">    <span class="comment">//Y_btom ≤ y1+μ*dy ≤ Y_top</span></span><br><span class="line">    p[<span class="number">1</span>] = -dx; q[<span class="number">1</span>] = x1 - XL; </span><br><span class="line">    p[<span class="number">2</span>] = dx; q[<span class="number">2</span>] = XR - x1;</span><br><span class="line">    p[<span class="number">3</span>] = -dy; q[<span class="number">3</span>] = y1 - YB; </span><br><span class="line">    p[<span class="number">4</span>] = dy; q[<span class="number">4</span>] = YT - y1;</span><br><span class="line">    <span class="comment">//有μ*p[k] ≤ q[k] 不等式取 = 对应与边界的四个交点参数</span></span><br><span class="line">    <span class="comment">//p[k] &lt; 0 对应两条入边</span></span><br><span class="line">    <span class="comment">//p[k] &lt; 0 对应两条出边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            u1 = max(u1, q[i] / p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            u2 = min(u2, q[i] / p[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">            (p[i] == <span class="number">0</span> &amp;&amp; q[i] &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u1 &gt; u2) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw(x1 + u1 * dx, y1 + u1 * dy, x1 + u2 * dx, y1 + u2 * dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;liang-barsky裁剪算法&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="liang-barsky裁剪" scheme="https://coincidenceboy.github.io/tags/liang-barsky%E8%A3%81%E5%89%AA/"/>
    
  </entry>
  
  <entry>
    <title>Bresenham画线算法</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/Bresenham%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/Bresenham%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/</id>
    <published>2020-12-23T09:30:08.000Z</published>
    <updated>2020-12-23T10:06:00.197Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="Bresenham画线算法"><a href="#Bresenham画线算法" class="headerlink" title="Bresenham画线算法"></a>Bresenham画线算法</h1><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><p><img src="/2020/12/23/Bresenham%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/2.png" alt="image-20201223173839501"></p><p><img src="/2020/12/23/Bresenham%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/3.png" alt="image-20201223173746808"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Bresenham-cpp"><a href="#Bresenham-cpp" class="headerlink" title="Bresenham.cpp"></a>Bresenham.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> site_left = <span class="number">550</span>;</span><br><span class="line"><span class="keyword">int</span> site_top = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> WinW = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> WinH = <span class="number">450</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;v[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区</span></span><br><span class="line"></span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawpixel</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">131.0</span> / <span class="number">255</span>, <span class="number">175.0</span> / <span class="number">255</span>, <span class="number">155.0</span> / <span class="number">255</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glVertex2i(x, y);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>, <span class="number">0.0</span>);<span class="comment">//设定清理颜色</span></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);<span class="comment">//清理缓冲区</span></span><br><span class="line">    </span><br><span class="line">    glColor3f(<span class="number">249.0</span> / <span class="number">255</span>, <span class="number">205.0</span> / <span class="number">255</span>, <span class="number">173.0</span> / <span class="number">255</span>);</span><br><span class="line">    glRectf(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//只需要检查一个误差项的符号，就可以确定每一列所选的像素。 </span></span><br><span class="line">    <span class="keyword">if</span> (x0 &gt; x1 &amp;&amp; y0 &gt; y1)</span><br><span class="line">        swap(x0, x1), swap(y0, y1);</span><br><span class="line">    <span class="keyword">if</span> (x1 &gt; x0 &amp;&amp; y1 &lt; y0)</span><br><span class="line">        swap(x0, x1), swap(y0, y1);</span><br><span class="line">    <span class="keyword">int</span> nowx, nowy, dx, dy, e;</span><br><span class="line">    <span class="keyword">double</span> k;</span><br><span class="line">    <span class="keyword">if</span> (x1 != x0)</span><br><span class="line">        k = <span class="keyword">double</span>((y1 - y0) * <span class="number">1.0</span> / (x1 - x0));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k = <span class="number">-1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">-1.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min(y0,y1); i &lt;= max(y0,y1); i++)</span><br><span class="line">            drawpixel(x0, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = min(x0, x1); i &lt;= max(x0, x1); i++)</span><br><span class="line">            drawpixel(i, y0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; k &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowx, nowy);</span><br><span class="line">            nowx++, e += <span class="number">2</span> * dy;</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x0, y0), swap(x1, y1);<span class="comment">//swap</span></span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123; </span><br><span class="line">            drawpixel(nowy, nowx);<span class="comment">//(nowy,nowx)</span></span><br><span class="line">            nowx++, e += <span class="number">2</span> * dy;</span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * dx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">0</span> &amp;&amp; k &gt;= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= -dx; i++) <span class="comment">//-dx</span></span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowx, nowy);</span><br><span class="line">            nowx--, e += <span class="number">2</span> * dy;     <span class="comment">//nowx--</span></span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy++, e -= <span class="number">2</span> * (-dx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(x0, y0), swap(x1, y1);<span class="comment">//swap</span></span><br><span class="line">        dx = x1 - x0, dy = y1 - y0, e = -dx;</span><br><span class="line">        nowx = x0, nowy = y0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= dx; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            drawpixel(nowy, nowx);  <span class="comment">//(nowy,nowx)</span></span><br><span class="line">            nowx++, e -= <span class="number">2</span> * dy;    <span class="comment">//-=</span></span><br><span class="line">            <span class="keyword">if</span> (e &gt;= <span class="number">0</span>)</span><br><span class="line">                nowy--, e -= <span class="number">2</span> * dx;<span class="comment">//nowy--</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseClick</span><span class="params">(<span class="keyword">int</span> button, <span class="keyword">int</span> state, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//x,y均是以窗口左上角为（0,0）的像素表示</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nowx = x, nowy = WinH - y;</span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_LEFT &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (tot &lt;= <span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            v[tot].x = nowx;</span><br><span class="line">            v[tot++].y = nowy;</span><br><span class="line">            <span class="keyword">if</span> (tot == <span class="number">2</span>) </span><br><span class="line">                Bresenham(v[<span class="number">0</span>].x, v[<span class="number">0</span>].y, v[<span class="number">1</span>].x, v[<span class="number">1</span>].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (button == GLUT_MIDDLE_BUTTON &amp;&amp; state == GLUT_DOWN) </span><br><span class="line">    &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        redraw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);<span class="comment">//显示窗口的缓存和颜色模型</span></span><br><span class="line">    glutInitWindowPosition(site_left, site_top);</span><br><span class="line">    glutInitWindowSize(WinW, WinH);</span><br><span class="line">    glutCreateWindow(<span class="string">&quot;Bresenham算法画直线&quot;</span>); <span class="comment">//创建带标题的窗口</span></span><br><span class="line">    gluOrtho2D(<span class="number">0</span>, WinW, <span class="number">0</span>, WinH);<span class="comment">// 区域大小定义  窗口的左下角是（0，0）</span></span><br><span class="line"></span><br><span class="line">    glutDisplayFunc(&amp;display);<span class="comment">//事件1：显示函数</span></span><br><span class="line">    glutMouseFunc(mouseClick);<span class="comment">//事件2：鼠标点击</span></span><br><span class="line">    <span class="comment">//glutMotionFunc(mouseMotion);//事件3：鼠标移动</span></span><br><span class="line">    glutMainLoop();<span class="comment">//让事件保持循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Bresenham画线算法&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="opengl图形学" scheme="https://coincidenceboy.github.io/categories/opengl%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="Bresenham画线算法" scheme="https://coincidenceboy.github.io/tags/Bresenham%E7%94%BB%E7%BA%BF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>高精加法乘法</title>
    <link href="https://coincidenceboy.github.io/2020/12/23/%E9%AB%98%E7%B2%BE%E5%8A%A0%E6%B3%95%E4%B9%98%E6%B3%95/"/>
    <id>https://coincidenceboy.github.io/2020/12/23/%E9%AB%98%E7%B2%BE%E5%8A%A0%E6%B3%95%E4%B9%98%E6%B3%95/</id>
    <published>2020-12-23T09:02:25.000Z</published>
    <updated>2020-12-28T06:49:30.621Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h1><blockquote><p>过程 见 高精乘法 图例.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], ans[N];<span class="comment">//下标均从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//读入并且将两个数a,b放入a[1-len_a],b[1-len_b]</span></span><br><span class="line">    <span class="built_in">string</span> s1, s2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">int</span> len_a = s1.size(), len_b = s2.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_a; i++)</span><br><span class="line">        a[i] = s1[len_a - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_b; i++)</span><br><span class="line">        b[i] = s2[len_b - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//模拟手算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max(len_a, len_b); i++)</span><br><span class="line">        ans[i] = a[i] + b[i];</span><br><span class="line">    <span class="keyword">int</span> len = max(len_a, len_b) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">            ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>, ans[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (ans[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h1><blockquote><p>模拟手算乘法</p><ul><li>先将读入的两个字符串”2934”,”3489”,分别倒序存入数组a[]和b[]中. ( a[1,4]={4,3,9,2} b[1.4]={9,8,4,3} )</li><li>手算过程 : 枚举 b[i] 去乘 a[1~4] 并且每次都记录进位 (进位可以最后综合到一起,如下图右侧)</li><li>最后处理一下 进位和前导0即可.</li></ul></blockquote><p><img src="/2020/12/23/%E9%AB%98%E7%B2%BE%E5%8A%A0%E6%B3%95%E4%B9%98%E6%B3%95/2.png" alt="image-20201223171705835"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], ans[N];<span class="comment">//下标均从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//读入并且将两个数a,b放入a[1-len_a],b[1-len_b]</span></span><br><span class="line">    <span class="built_in">string</span> s1, s2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">int</span> len_a = s1.size(), len_b = s2.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_a; i++)</span><br><span class="line">        a[i] = s1[len_a - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_b; i++)</span><br><span class="line">        b[i] = s2[len_b - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//模拟手算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len_b;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len_a; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] += b[i] * a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> len = len_a + len_b;</span><br><span class="line">    <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">            ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>, ans[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (ans[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阶乘之和"><a href="#阶乘之和" class="headerlink" title="阶乘之和"></a>阶乘之和</h1><p><img src="/2020/12/23/%E9%AB%98%E7%B2%BE%E5%8A%A0%E6%B3%95%E4%B9%98%E6%B3%95/3.png" alt="image-20201223211653981"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], ans[N];<span class="comment">//下标均从1开始</span></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1000</span>,<span class="number">100</span>,<span class="number">10</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> s1, <span class="built_in">string</span> s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">int</span> len_a = <span class="number">0</span>, len_b = s2.size();</span><br><span class="line">    <span class="keyword">int</span> tmp = s1;</span><br><span class="line">    b[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; dx[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[<span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">                b[++len_a] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;= dx[i])</span><br><span class="line">        &#123;</span><br><span class="line">            b[++len_a] = tmp / dx[i];</span><br><span class="line">            tmp = tmp % dx[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len_a; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        a[++l] = b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_b; i++)</span><br><span class="line">        b[i] = s2[len_b - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//模拟手算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_b; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len_a; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] += b[i] * a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> len = len_a + len_b;</span><br><span class="line">    <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">            ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>, ans[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (ans[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        s += ans[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> s1, <span class="built_in">string</span> s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">int</span> len_a = s1.size(), len_b = s2.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_a; i++)</span><br><span class="line">        a[i] = s1[len_a - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len_b; i++)</span><br><span class="line">        b[i] = s2[len_b - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="comment">//模拟手算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max(len_a, len_b); i++)</span><br><span class="line">        ans[i] = a[i] + b[i];</span><br><span class="line">    <span class="keyword">int</span> len = max(len_a, len_b) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &gt; <span class="number">9</span>)</span><br><span class="line">            ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>, ans[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (ans[len] == <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        s += ans[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    str[<span class="number">1</span>] = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = multi(i, str[i - <span class="number">1</span>]);<span class="comment">//单精度×高精度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] = add(str[i], str[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;高精度加法&quot;&gt;&lt;a href=&quot;#高精度加法&quot;</summary>
      
    
    
    
    <category term="C++" scheme="https://coincidenceboy.github.io/categories/C/"/>
    
    
    <category term="高精" scheme="https://coincidenceboy.github.io/tags/%E9%AB%98%E7%B2%BE/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="https://coincidenceboy.github.io/2020/12/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>https://coincidenceboy.github.io/2020/12/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</id>
    <published>2020-12-21T02:02:14.000Z</published>
    <updated>2020-12-27T14:11:37.189Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><h1 id="拓扑排序-仅DAG"><a href="#拓扑排序-仅DAG" class="headerlink" title="拓扑排序(仅DAG)"></a>拓扑排序(仅DAG)</h1><h2 id="dfs逆后序-即-拓扑序"><a href="#dfs逆后序-即-拓扑序" class="headerlink" title="dfs逆后序 即 拓扑序"></a>dfs逆后序 即 拓扑序</h2><blockquote><p>首先明确 dfs后序 即 各点完成时间的序列</p><p>逆后序—&gt;完成时间从大到小进行排序</p></blockquote><p><img src="/2020/12/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/2.png" alt="image-20201227134142180"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//dfs</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> d[N], f[N], dcnt, fcnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//原本d[u]=++time;记录的是发现时间</span></span><br><span class="line">    d[++dcnt] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//原本f[u]=++time;记录的是完成时间</span></span><br><span class="line">    f[fcnt++] = u;<span class="comment">//dfs后序 相当于是按完成时间小--&gt;大依次存储</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[i])</span><br><span class="line">            dfs(i);</span><br><span class="line">    <span class="comment">//反向输出 dfs后序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= i; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一层一层的拓扑序"><a href="#一层一层的拓扑序" class="headerlink" title="一层一层的拓扑序"></a>一层一层的拓扑序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toposort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans.clear();</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="comment">//点从1开始到n   如果从0开始 改成  for(int i=0;i&lt;n;i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(in_deg[i]==<span class="number">0</span>&amp;&amp;!vis[i]) </span><br><span class="line">        &#123;</span><br><span class="line">            q.push(-i);</span><br><span class="line">            vis[i]=<span class="number">1</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top(); q.pop();</span><br><span class="line">        count--;</span><br><span class="line">        ans.push_back(-now);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[-now];~i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            in_deg[v]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  <span class="comment">//点从1开始到n   </span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(in_deg[i]==<span class="number">0</span>&amp;&amp;!vis[i]) </span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(-i);</span><br><span class="line">                    count++;</span><br><span class="line">                    vis[i]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只关注相邻序列的拓扑序-Kahn算法"><a href="#只关注相邻序列的拓扑序-Kahn算法" class="headerlink" title="只关注相邻序列的拓扑序(Kahn算法)"></a>只关注相邻序列的拓扑序(Kahn算法)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//仅 使得前面节点 不依赖于 后面的节点(联想 选课.</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toposort</span><span class="params">()</span><span class="comment">//输出字典序最小的toposort</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans.clear();</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(in_deg[i]==<span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            q.push(-i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top(); q.pop();</span><br><span class="line">        ans.push_back(-now);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[-now];~i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(--in_deg[v]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(-v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;拓扑排序-仅DAG&quot;&gt;&lt;a href=&quot;#拓扑</summary>
      
    
    
    
    <category term="图论" scheme="https://coincidenceboy.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="拓扑排序" scheme="https://coincidenceboy.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最短路</title>
    <link href="https://coincidenceboy.github.io/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>https://coincidenceboy.github.io/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/</id>
    <published>2020-12-20T01:36:22.000Z</published>
    <updated>2021-01-02T13:54:28.522Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><p><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/3.png" alt="image-20201220111748833"></p><h1 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h1><blockquote><p>Floyd—&gt;求图中任意两点之间的距离.</p><p>Floyd怎么来的? 动态规划的思想</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">① 首先定义一个三维数组 f[k][x][y] 表示只允许经过节点<span class="number">1</span>到k,节点x到节点y的最短路长度</span><br><span class="line">② 所以f[n][x][y],即节点x到节点y的最短路长度</span><br><span class="line">③ f[k][x][y]=min(f[k<span class="number">-1</span>][x][y],f[k<span class="number">-1</span>][x][k] + f[k<span class="number">-1</span>][k][y]);</span><br><span class="line"></span><br><span class="line">改进:</span><br><span class="line">不难发现我们可以把第一维优化掉(因为在阶段k时,f[x][k]和f[k][y]不会被更新)</span><br><span class="line">    即 f[x][y]=min(f[x][y],f[x][k]+f[k][y])</span><br></pre></td></tr></table></figure><h2 id="Floyd代码实现"><a href="#Floyd代码实现" class="headerlink" title="Floyd代码实现"></a>Floyd代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Floyd</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> dis[N][N];<span class="comment">//dis初始化为inf,dis[i][j]表点i到点j的最短距离.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> **dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">           dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd应用-复杂度-O-n-3"><a href="#Floyd应用-复杂度-O-n-3" class="headerlink" title="Floyd应用 (复杂度:O(n^3))"></a>Floyd应用 (复杂度:O(n^3))</h2><ol><li>多源最短路</li><li>图上的传递闭包,任意两点的连通关系.</li></ol><h2 id="传递闭包例题"><a href="#传递闭包例题" class="headerlink" title="传递闭包例题"></a>传递闭包例题</h2><p><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/2.png" alt="image-20201220105100077"></p><blockquote><p>N≤500,可以看出复杂度要求是O(n^3). (但是500^3=125,000,000 容易卡常数,详情见下面第三重循环剪枝)</p><p>由于胜负关系具有传递性,则可以用Floyd求出任意两点的胜负关系(传递闭包).</p><p>可以定义关系(初始化dis[] []为0)</p><ol><li>dis[a] [b]==1 表示a赢了b</li><li>dis[a] [b]==0并且dis[b] [a]==0 表示a与b胜负关系无法预知.</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b,dis[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        dis[a][b] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis[i][k])<span class="comment">//第三层剪枝 因为只有dis[i][k]=1,第三重循环才是有意义的</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">              dis[i][j] = max(dis[i][j], dis[i][k] &amp; dis[k][j]);<span class="comment">//i赢k,k赢j---&gt;i赢k</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (dis[i][j] == <span class="number">0</span> &amp;&amp; dis[j][i] == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Dijkstra-迪杰特斯拉"><a href="#Dijkstra-迪杰特斯拉" class="headerlink" title="Dijkstra(迪杰特斯拉)"></a>Dijkstra(迪杰特斯拉)</h1><blockquote><p>该算法主要用来解决 图中没有负边的单源最短路 问题(因为dj算法判断负环比较困难)</p><p>复杂度O((n+m)logn) 即 mlogn</p><p>算法实现的大致流程</p><ol><li>设置s为源点,dis[a]表示源点s到点a的最短距离,初始化dis[s]=0,dis[i]=inf,将s加入最小堆</li><li>每次从堆中取出一个点x(肯定是新加入的点影响到原结果),遍历x的所有邻接边edge(x y w),比较dis[y]与dis[x]+w的大小 ——即<strong>松弛操作</strong></li><li>已收录的点,即被最小堆弹出过的点, 对任一未收录的顶点v,dis[v]表示从s到v的最短路径,但是该最短路径 <strong>仅经过所有被收录的顶点</strong>.</li></ol></blockquote><h2 id="Dijkstra模板代码"><a href="#Dijkstra模板代码" class="headerlink" title="Dijkstra模板代码"></a>Dijkstra模板代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>, N = <span class="number">1e5</span>, M = <span class="number">1e6</span>;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="keyword">int</span> head[N], cnt = <span class="number">0</span>, n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v, edge[cnt].w = w, edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="keyword">int</span> vis[N], dis[N];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;<span class="comment">//默认是最大堆,最大堆丢负数--&gt;最小堆</span></span><br><span class="line"><span class="comment">//用最小堆 是为了确定 哪个是下一个点  基本思想就是 不断地从未收录的点集中收录顶点(依据是dis值)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.size()) q.pop();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        vis[i] = <span class="number">0</span>, dis[i] = inf;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>, s)); <span class="comment">//pair排序是按照pair.first进行排序的 所以第一个存距离，第二个存点</span></span><br><span class="line">    <span class="comment">//主要部分</span></span><br><span class="line">    <span class="keyword">while</span> (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top().second;<span class="comment">//堆中dis最小值的点</span></span><br><span class="line">        q.pop();                <span class="comment">//即已收录的点集合 到 未收录点集合距离最小的点</span></span><br><span class="line">        <span class="keyword">if</span> (vis[now]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//松弛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = now, v = edge[i].v, w = edge[i].w;<span class="comment">// u(now) v w</span></span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-dis[v], v));  <span class="comment">//最大堆丢负数 变最小堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题–一条商业线的最短路问题"><a href="#例题–一条商业线的最短路问题" class="headerlink" title="例题–一条商业线的最短路问题"></a>例题–一条商业线的最短路问题</h2><p><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/4.png" alt="image-20201220163344299"></p><h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><blockquote><p><strong>思路1</strong></p><ol><li><p>以 起点 为源点 跑 单源最短路,得到dis1数组;</p></li><li><p>以 终点 为源点 跑 单源最短路,得到dis2数组;</p></li><li><p>枚举每条商业线edge(u,v,w),ans=min{ans , dis1[u]+dis2[v]+w , dis1[v]+dis2[u]+w};</p></li><li><p>最后再 ans=min(ans,不走商业线的最短距离);</p><blockquote><p><strong>思路2(分层图最短路)</strong></p><ol><li>跑一次单源最短路(变形版),记录答案dis[u] [0/1]</li><li>dis[u] [0]表示从起点到节点u没有经过商业线时的最短路,松弛时可以选择商业线或者经济线</li><li>dis[u] [1]表示从起点到节点u经过商业线后的最短路,在松弛的时候只能选择经济线.</li></ol></blockquote></li></ol></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>, N = <span class="number">1e5</span>, M = <span class="number">1e6</span>;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="keyword">int</span> head[N], cnt = <span class="number">0</span>, n, m, k;</span><br><span class="line"><span class="keyword">int</span> s, e;<span class="comment">//起点,终点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v, edge[cnt].w = w, edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Dijkstra</span></span><br><span class="line"><span class="keyword">int</span> vis[N], dis1[N], dis2[N], path1[N], path2[N];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;<span class="comment">//默认是最大堆,最大堆丢负数--&gt;最小堆</span></span><br><span class="line"><span class="comment">//用最小堆 是为了确定 哪个是下一个点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span>* dis,<span class="keyword">int</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.size()) q.pop();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        vis[i] = <span class="number">0</span>, dis[i] = inf, path[i] = <span class="number">-1</span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>, s)); <span class="comment">//pair排序是按照pair.first进行排序的 所以第一个存距离，第二个存点</span></span><br><span class="line">    <span class="comment">//主要部分</span></span><br><span class="line">    <span class="keyword">while</span> (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top().second;<span class="comment">//堆中dis最小值的点</span></span><br><span class="line">        q.pop();<span class="comment">//即已收录的点集合 到 未收录点集合距离最小的点</span></span><br><span class="line">        <span class="keyword">if</span> (vis[now]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//松弛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = now, v = edge[i].v, w = edge[i].w;<span class="comment">// u(now) v w</span></span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-dis[v], v));  <span class="comment">//最大堆丢负数 变最小堆</span></span><br><span class="line">                path[v] = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> ss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ss == s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ss;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    output(path1[ss]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; e;</span><br><span class="line">    <span class="keyword">int</span> mindis = inf;</span><br><span class="line">    <span class="comment">//经济线</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(s, dis1, path1);</span><br><span class="line">    dijkstra(e, dis2, path2);</span><br><span class="line">    <span class="comment">//商业线</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">-1</span>, R = <span class="number">-1</span>, id = <span class="number">-1</span>;<span class="comment">//记录一下从哪一站乘坐商业线 以及商业线的左右节点</span></span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="comment">//mindis = min(mindis, dis1[u] + dis2[v] + w,dis1[v] + dis2[u] + w);</span></span><br><span class="line">        <span class="keyword">if</span> (mindis &gt; dis1[u] + dis2[v] + w)</span><br><span class="line">        &#123;</span><br><span class="line">            L = u, R = v, id = u;</span><br><span class="line">            mindis = dis1[u] + dis2[v] + w; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mindis &gt; dis1[v] + dis2[u] + w)</span><br><span class="line">        &#123;</span><br><span class="line">            L = v, R = u, id = v;</span><br><span class="line">            mindis = dis1[v] + dis2[u] + w; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mindis &gt; dis1[e])<span class="comment">//最短距离是 不使用商业票的时候</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;路线依次:&quot;</span>;<span class="comment">//输出路线</span></span><br><span class="line">        output(e);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;Ticket Not Used&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; dis1[e] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;路线依次:&quot;</span>;<span class="comment">//输出路线</span></span><br><span class="line">        <span class="comment">//使用商业线时,路线应该为 e--&gt;L--&gt;R--&gt;s</span></span><br><span class="line">        output(L);<span class="comment">//递归反向输出第一段 e--&gt;L</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = R;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="number">-1</span>)<span class="comment">//递推正向输出第二段R--&gt;s</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (path2[tmp] != <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; tmp;</span><br><span class="line">            tmp = path2[tmp];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出商业线车站号 和 总时间</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">&quot;商业线车站号:&quot;</span>&lt;&lt;id &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">&quot;最短时间:&quot;</span>&lt;&lt; mindis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/5.png" alt="image-20201220172254518"></p><p><strong>注意:</strong>  </p><p>输出路径时,<strong>从起点输出时</strong>递归输出(因为记录的是上一个位置,对应反向查找的过程,<strong>从终点输出时</strong>直接递推正序输出即可</p></blockquote><h4 id="思路2—分层图"><a href="#思路2—分层图" class="headerlink" title="思路2—分层图"></a>思路2—分层图</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//待补充</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><hr><h1 id="Bellman-ford算法及其队列优化-SPFA"><a href="#Bellman-ford算法及其队列优化-SPFA" class="headerlink" title="Bellman-ford算法及其队列优化(SPFA)"></a>Bellman-ford算法及其队列优化(SPFA)</h1><h2 id="Bellman-ford"><a href="#Bellman-ford" class="headerlink" title="Bellman-ford"></a>Bellman-ford</h2><blockquote><p>Bellman-ford算法可以给出源点s至图中其他所有点的最短路 以及 对应的前驱子图.</p><p>Bellman-ford算法的正确性基于以下事实:</p><ol><li>最短路经过的路径条数 ＜ 图中点的个数.(若 ≥ 点的个数,则意味着某点被重复经过)</li><li>当松弛边(u,v)时,如果dis[u]已经是最短路,并且在v的最短路径上(给定图,最短路径一定是确定的,只是现在还没有找到)u是v的前驱点,则松弛之后dis[v]也是最短路(相当于往外扩展了一层),并且以后其dis值不会改变.</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Bellman-ford</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    dis[i]=inf;<span class="comment">//初始化所有点的dis值都是inf</span></span><br><span class="line">    pre[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)<span class="comment">//一层一层 松弛n-1次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="comment">//每轮松弛所有的边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[i].u , v=edge[i].v , w=edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(dis[v] &gt; dis[u]+w)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[v]=dis[u]+w;</span><br><span class="line">            pre[v]=u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//判负环--如果第n次还可以松弛的话</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> u=edge[i].u , v=edge[i].v , w=edge[i].w;</span><br><span class="line">    <span class="keyword">if</span>(dis[v] &gt; dis[u]+w)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;存在负环&quot;</span>&lt;&lt;<span class="built_in">endl</span>;        </span><br><span class="line">&#125;</span><br><span class="line">时间复杂度为O(nm)</span><br></pre></td></tr></table></figure><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/6.png" alt="image-20201220204140832" style="zoom:67%;"><blockquote><p>Bellman-ford算法完美解决了负权边的问题,但是它的复杂度过高,堪比复杂度为O(n^3)的Floyd算法,让人无法接受.  (m最大值可以为(n*(n-1))/2,也就是说m可以达到n^2.)</p><p>仔细观察Bellman-ford算法的松弛过程</p><ol><li>在第一轮松弛的过程中,最短路 边数为1 的点被确定了.</li><li>在第二轮松弛的过程中,最短路 边数为2 的点被确定了.</li><li>……</li><li>在第n-1轮松弛的过程中,最短路 边数为n-1的点被确定了.</li></ol></blockquote><hr><blockquote><p>在Bellman-ford算法中,每一轮都有很多无效的松弛操作,怎样可以避免呢?</p><p>—&gt; 解决了这个问题就得到了 Bellman-ford的队列优化算法—SPFA</p></blockquote><h2 id="SPFA-Shortest-Path-Faster-Algorithm"><a href="#SPFA-Shortest-Path-Faster-Algorithm" class="headerlink" title="SPFA(Shortest Path Faster Algorithm)"></a>SPFA(Shortest Path Faster Algorithm)</h2><blockquote><p>在之前观察Bellman-ford算法的松弛过程中,可以看出,松弛操作仅仅发生在最短路径 前导节点中 已经成功松弛过的节点上.</p><ol><li>第一轮,与s邻接的点被松弛—&gt;最短路 边数为1 的点被确定</li><li>与第一轮被松弛的点 相邻接的点被松弛 —&gt;最短路 边数为2 的点被确定</li><li>…</li><li>一直到最短路 边数为n-1的点被确定 算法结束</li></ol></blockquote><blockquote><p><strong>为了每次都只做有效的松弛</strong></p><ol><li>建立一个队列</li><li>队列中储存被成功松弛的点</li><li>每次从队首取点并松弛其邻接点</li><li>如果邻接点松弛成功则将其放入队列</li></ol><p>需要注意的point: 因为队列中存储的是 每一层的点,如何避免重复入队? —-&gt; 用数组记录一下是否已经在队列中</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>, N = <span class="number">1e5</span>, M = <span class="number">1e6</span>;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="keyword">int</span> head[N], cnt = <span class="number">0</span>, n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v, edge[cnt].w = w, edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bfs判负环</span></span><br><span class="line"><span class="keyword">bool</span> flag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">while</span>(Q.size()) Q.pop();</span><br><span class="line">    Q.push(s); flag[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = Q.front(); Q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];~i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = now,v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(!flag[v])</span><br><span class="line">            &#123;</span><br><span class="line">                flag[v] = <span class="number">1</span>;</span><br><span class="line">                Q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//spfa(Shortest Path Faster algorithm)</span></span><br><span class="line"><span class="keyword">int</span> vis[N],cnt[N],dis[N],pre[N];</span><br><span class="line"><span class="comment">//①vis - 点在不在队列中 ②cnt[x]表示点x最短路的边数(即第几层) ③dis - 距离 ④pre - 前驱</span></span><br><span class="line"><span class="comment">//如果cnt[x]&gt;=n,则表明出现了负环</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(q.size()) q.pop();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        vis[i]=cnt[i]=pre[i]=<span class="number">0</span>,dis[i]=inf;</span><br><span class="line">    <span class="comment">//队列中加入初始点</span></span><br><span class="line">    vis[s]=<span class="number">1</span>,dis[s]=<span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="comment">//主要部分</span></span><br><span class="line">    <span class="keyword">while</span>(q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front(); q.pop();</span><br><span class="line">        vis[x]=<span class="number">0</span>;<span class="comment">//vis[]记录的是点在不在当前队列中,此时x出了队列</span></span><br><span class="line">        <span class="comment">//松弛操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];~i;i=edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=x,v=edge[i].v,w=edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                pre[v] = u;</span><br><span class="line">                <span class="comment">//cnt[u] 表点x最短路的边数(即第几层)</span></span><br><span class="line">                <span class="comment">//cnt[v] 相当于从x走(x,y)这条边到达了y</span></span><br><span class="line">                cnt[v] = cnt[x] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[v]&gt;=n)</span><br><span class="line">                    bfs(v);<span class="comment">//可以跑一下bfs/dfs 然后用flag数组标记一下所有负环的点</span></span><br><span class="line">                <span class="keyword">if</span>(!vis[v]&amp;&amp;!flag[v])<span class="comment">//当前点v没有在队列中，并且不是负环的一部分</span></span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度平均是O(km)</span><br><span class="line">k是一个小于n的小常数(大多情况下都很小),但是在特殊情况下k可能会很大 </span><br><span class="line">(即spfa在特殊情况下时间复杂度会退化成O(nm))</span><br></pre></td></tr></table></figure><blockquote><p>思考:</p><p>最短路存在吗? —–①当有负环的时候,最短路不存在 ②S不可达 即dis[s]==inf</p></blockquote><hr><h3 id="spfa例题—喵星收税"><a href="#spfa例题—喵星收税" class="headerlink" title="spfa例题—喵星收税"></a>spfa例题—喵星收税</h3><h1 id="关于最长路"><a href="#关于最长路" class="headerlink" title="关于最长路"></a>关于最长路</h1><blockquote><p><strong>在spfa中</strong>,只需要将 <u>**①dis初始值 改成 -inf ②松弛条件由 dis[v] &gt; dis[u] + w —&gt;dis[v] &lt; dis[u] + w即可**</u></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Dijkstra 跑 最长路</span></span><br><span class="line"><span class="keyword">int</span> vis[N], dis[N];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.size()) q.pop();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        vis[i] = <span class="number">0</span>, dis[i] = -inf;<span class="comment">//原本:dis[i] = inf</span></span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span> (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top().second,v = q.top().first;</span><br><span class="line">        q.pop(); </span><br><span class="line">        <span class="comment">//if (vis[now]) continue;</span></span><br><span class="line">        <span class="comment">//这句话原本表明 一个点一旦从最小堆中弹出,则这个点的dis到达了最小值</span></span><br><span class="line">        <span class="comment">//但如果是最长路 一个点一旦从最大堆中弹出,则这个点的dis到达了最大值??? 可惜结论是不对的</span></span><br><span class="line">        我们不太需要判断vis可以将所有vis[]变量删除即可 取出v = q.top().first即距离取出来</span><br><span class="line">        <span class="keyword">if</span>(v &lt; dis[now]) <span class="keyword">continue</span>;</span><br><span class="line">           </span><br><span class="line">        vis[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = now, v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &lt; dis[u] + w)<span class="comment">//原本:dis[v] &gt; dis[u] + w</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(dis[v], v));  </span><br><span class="line">                <span class="comment">//原本:最大堆里面丢负数当最小堆,但是现在要用最大堆 所以去掉负号</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/12/20/%E5%9B%BE%E4%B8%AD%E6%9C%80%E7%9F%AD%E8%B7%AF/7.png" alt="image-20201220221334950" style="zoom:67%;">]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/2020/12/20/%E5%9B</summary>
      
    
    
    
    <category term="图论" scheme="https://coincidenceboy.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="最短路" scheme="https://coincidenceboy.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="https://coincidenceboy.github.io/2020/12/19/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://coincidenceboy.github.io/2020/12/19/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2020-12-19T10:26:03.000Z</published>
    <updated>2020-12-27T14:11:42.322Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js"></script><p><img src="/2020/12/19/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/4.png"></p><blockquote><ul><li>一般来说是<strong>无向图</strong>,有向图没太大意义.</li></ul></blockquote><h1 id="Kruskal-克鲁斯卡尔"><a href="#Kruskal-克鲁斯卡尔" class="headerlink" title="Kruskal(克鲁斯卡尔)"></a>Kruskal(克鲁斯卡尔)</h1><blockquote><p>基于边的贪心算法</p><p>一句话—&gt;”每次贪心地将图中最小的非树边标记为树边,非法则跳过.”</p><ol><li>将边按照权值小–&gt;大排序</li><li>按顺序考虑每条边,只要这条边和我们已经选择的边不构成回路,就保留该边,否则放弃这条边.</li><li>成功选择(n-1)条边后,则构成最小生成树; 如果无法选择出(n-1)条边,这说明原图不连通</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kruskal算法 记录图的拓扑 可以简单用struct Edge来实现. 因为该算法不需要遍历点(点的出边等)</span></span><br><span class="line"><span class="comment">//而且不需要考虑边的方向性. 每条边保存一次即可</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Edge&amp; p)<span class="keyword">const</span></span><br><span class="line">    &#123;<span class="keyword">return</span> w &lt; p.w;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">//边数</span></span><br><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="keyword">int</span> par[N],cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        par[i]=i,cnt[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(par[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> par[x] = find(par[x]);<span class="comment">//①路径压缩</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = find(x),y=find(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt[x]&gt;cnt[y])</span><br><span class="line">        swap(x,y);<span class="comment">//小树挂在大树上.②启发式合并</span></span><br><span class="line">    par[x]=y;</span><br><span class="line">    cnt[y]+=cnt[x];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//kruskal</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init(n);</span><br><span class="line">    sort(edge,edge+num);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(unite(edge[i].u,edge[i].v))</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=edge[i].w;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="keyword">if</span>(sum==n<span class="number">-1</span>)<span class="comment">//n个点求MST</span></span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Prim-普里姆"><a href="#Prim-普里姆" class="headerlink" title="Prim(普里姆)"></a>Prim(普里姆)</h1><blockquote><p>基于点的贪心算法</p><p>一句话—&gt;”维护一个连通的点集 , 每次都从不在该点集内的点选出一个加入该连通点集的代价最小的点.”</p></blockquote><h2 id="堆优化prim-代码同Dijkstra"><a href="#堆优化prim-代码同Dijkstra" class="headerlink" title="堆优化prim(代码同Dijkstra)"></a>堆优化prim(代码同Dijkstra)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>, N = <span class="number">1e5</span>, M = <span class="number">1e6</span>;</span><br><span class="line"><span class="comment">//链式前向星</span></span><br><span class="line"><span class="keyword">int</span> head[N], cnt = <span class="number">0</span>, n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v, edge[cnt].w = w, edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//prim  代码基本上同dij</span></span><br><span class="line"><span class="keyword">int</span> vis[N],min_cost[N];</span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q;   <span class="comment">//默认是最大堆,最大堆丢负数--&gt;最小堆</span></span><br><span class="line"><span class="comment">//用最小堆 是为了确定 哪个是下一个点  基本思想就是 不断地从未收录的点集中收录顶点(依据是min_cost值)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.size()) q.pop();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        vis[i] = <span class="number">0</span>, min_cost[i] = inf;</span><br><span class="line">    min_cost[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.push(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));<span class="comment">//不妨以节点1为起始</span></span><br><span class="line">    <span class="comment">//主要部分</span></span><br><span class="line">    <span class="keyword">while</span> (q.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.top().second,       </span><br><span class="line">            tmp_ans = -q.top().first;   </span><br><span class="line">        q.pop();                    </span><br><span class="line">        <span class="keyword">if</span> (vis[now]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="literal">true</span>;</span><br><span class="line">        ans += tmp_ans;</span><br><span class="line">        <span class="comment">//松弛</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[now]; ~i; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = now, v = edge[i].v, w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (min_cost[v] &gt;  w)</span><br><span class="line">            &#123;</span><br><span class="line">                min_cost[v] =  w;</span><br><span class="line">                q.push(<span class="built_in">make_pair</span>(-w, v));  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; prim() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="朴素的prim代码"><a href="#朴素的prim代码" class="headerlink" title="朴素的prim代码"></a>朴素的prim代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>,inf=<span class="number">1e9</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m, min_cost[N], g[N][N] = &#123;&#125;;<span class="comment">//邻接矩阵存图</span></span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span><span class="comment">//点集从1到n</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">//连通点集不妨从点1开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        min_cost[i] = g[<span class="number">1</span>][i];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//选出一个!vis 并且 到点集距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; (!v || min_cost[v] &gt; min_cost[i]))</span><br><span class="line">                v = i;</span><br><span class="line">        <span class="comment">//if (!v) break;</span></span><br><span class="line">        <span class="keyword">if</span> (min_cost[v] == inf || !v) <span class="keyword">break</span>; <span class="comment">//没有可以选的点</span></span><br><span class="line">        tot++;</span><br><span class="line">        ans += min_cost[v];</span><br><span class="line">        vis[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//必定是新加入的点影响了其他未加入的点 到点集的距离</span></span><br><span class="line">        <span class="comment">//以这个新点为边点,更新所有未加入点到该点集的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; min_cost[i] &gt; g[v][i])</span><br><span class="line">                min_cost[i] = g[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tot != n) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//n个点是否连通</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            g[i][j] = inf;<span class="comment">//初始化g[N][N]为inf</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        g[u][v] = w;</span><br><span class="line">        g[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; prim()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/mouse_snow.min.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;/2020/12/19/%E6%9C</summary>
      
    
    
    
    <category term="图论" scheme="https://coincidenceboy.github.io/categories/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="最小生成树" scheme="https://coincidenceboy.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
</feed>
